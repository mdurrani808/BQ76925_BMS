
BMS-Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006774  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006a64  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006ac4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  240000d0  08006b24  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007d4  08006b24  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b077  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c4f  00000000  00000000  0003b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  0003de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3d  00000000  00000000  0003f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000377f0  00000000  00000000  0003fe85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018981  00000000  00000000  00077675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015eb37  00000000  00000000  0008fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e7c  00000000  00000000  001eeb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001f39ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080069f4 	.word	0x080069f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080069f4 	.word	0x080069f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fd8c 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80c 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f994 	bl	800090c <MX_GPIO_Init>
  MX_ETH_Init();
 80005e4:	f000 f888 	bl	80006f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f912 	bl	8000810 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f95c 	bl	80008a8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005f0:	f000 f8ce 	bl	8000790 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x20>
	...

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	; 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	224c      	movs	r2, #76	; 0x4c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 f9c8 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 f9c2 	bl	800699c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000618:	2002      	movs	r0, #2
 800061a:	f001 ff83 	bl	8002524 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <SystemClock_Config+0xf8>)
 8000624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000626:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <SystemClock_Config+0xf8>)
 8000628:	f023 0301 	bic.w	r3, r3, #1
 800062c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800062e:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <SystemClock_Config+0xf8>)
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <SystemClock_Config+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <SystemClock_Config+0xfc>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <SystemClock_Config+0xfc>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000654:	bf00      	nop
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0xfc>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000662:	d1f8      	bne.n	8000656 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000664:	2303      	movs	r3, #3
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800066e:	2301      	movs	r3, #1
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2340      	movs	r3, #64	; 0x40
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000682:	2318      	movs	r3, #24
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068a:	2304      	movs	r3, #4
 800068c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000692:	230c      	movs	r3, #12
 8000694:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000696:	2300      	movs	r3, #0
 8000698:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ff88 	bl	80025b8 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ae:	f000 fa09 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	233f      	movs	r3, #63	; 0x3f
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2101      	movs	r1, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fbc8 	bl	8002e6c <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006e2:	f000 f9ef 	bl	8000ac4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3770      	adds	r7, #112	; 0x70
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400
 80006f4:	58024800 	.word	0x58024800

080006f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_ETH_Init+0x80>)
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MX_ETH_Init+0x84>)
 8000700:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ETH_Init+0x88>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ETH_Init+0x88>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ETH_Init+0x88>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ETH_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ETH_Init+0x88>)
 800071c:	2200      	movs	r2, #0
 800071e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ETH_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ETH_Init+0x80>)
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_ETH_Init+0x88>)
 800072a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_ETH_Init+0x80>)
 800072e:	2201      	movs	r2, #1
 8000730:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ETH_Init+0x80>)
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_ETH_Init+0x8c>)
 8000736:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ETH_Init+0x80>)
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <MX_ETH_Init+0x90>)
 800073c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_ETH_Init+0x80>)
 8000740:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000744:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ETH_Init+0x80>)
 8000748:	f000 fe8e 	bl	8001468 <HAL_ETH_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000752:	f000 f9b7 	bl	8000ac4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000756:	2238      	movs	r2, #56	; 0x38
 8000758:	2100      	movs	r1, #0
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_ETH_Init+0x94>)
 800075c:	f006 f91e 	bl	800699c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_ETH_Init+0x94>)
 8000762:	2221      	movs	r2, #33	; 0x21
 8000764:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_ETH_Init+0x94>)
 8000768:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800076c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_ETH_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	24000124 	.word	0x24000124
 800077c:	40028000 	.word	0x40028000
 8000780:	240007c8 	.word	0x240007c8
 8000784:	24000070 	.word	0x24000070
 8000788:	24000010 	.word	0x24000010
 800078c:	240000ec 	.word	0x240000ec

08000790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_I2C1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_I2C1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_I2C1_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_I2C1_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_I2C1_Init+0x74>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ca:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_I2C1_Init+0x74>)
 80007cc:	f001 fc3a 	bl	8002044 <HAL_I2C_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d6:	f000 f975 	bl	8000ac4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_I2C1_Init+0x74>)
 80007de:	f001 fcc1 	bl	8002164 <HAL_I2CEx_ConfigAnalogFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e8:	f000 f96c 	bl	8000ac4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_I2C1_Init+0x74>)
 80007f0:	f001 fd03 	bl	80021fa <HAL_I2CEx_ConfigDigitalFilter>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f963 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	240001d4 	.word	0x240001d4
 8000808:	40005400 	.word	0x40005400
 800080c:	10707dbc 	.word	0x10707dbc

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000816:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <MX_USART3_UART_Init+0x94>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800085a:	f004 fcbf 	bl	80051dc <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000864:	f000 f92e 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800086c:	f005 fcc1 	bl	80061f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000876:	f000 f925 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800087e:	f005 fcf6 	bl	800626e <HAL_UARTEx_SetRxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 f91c 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_USART3_UART_Init+0x90>)
 800088e:	f005 fc77 	bl	8006180 <HAL_UARTEx_DisableFifoMode>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 f914 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24000228 	.word	0x24000228
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b4:	2209      	movs	r2, #9
 80008b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f0:	f001 fccf 	bl	8002292 <HAL_PCD_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008fa:	f000 f8e3 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240002bc 	.word	0x240002bc
 8000908:	40080000 	.word	0x40080000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b62      	ldr	r3, [pc, #392]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	4a60      	ldr	r2, [pc, #384]	; (8000aac <MX_GPIO_Init+0x1a0>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000932:	4b5e      	ldr	r3, [pc, #376]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000940:	4b5a      	ldr	r3, [pc, #360]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a59      	ldr	r2, [pc, #356]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b56      	ldr	r3, [pc, #344]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b53      	ldr	r3, [pc, #332]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a51      	ldr	r2, [pc, #324]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <MX_GPIO_Init+0x1a0>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	4a4a      	ldr	r2, [pc, #296]	; (8000aac <MX_GPIO_Init+0x1a0>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098c:	4b47      	ldr	r3, [pc, #284]	; (8000aac <MX_GPIO_Init+0x1a0>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b44      	ldr	r3, [pc, #272]	; (8000aac <MX_GPIO_Init+0x1a0>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	4a42      	ldr	r2, [pc, #264]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009aa:	4b40      	ldr	r3, [pc, #256]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	4a3b      	ldr	r2, [pc, #236]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a33      	ldr	r2, [pc, #204]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_GPIO_Init+0x1a0>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f244 0101 	movw	r1, #16385	; 0x4001
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x1a4>)
 80009fc:	f001 fb08 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000a08:	f001 fb02 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000a12:	f001 fafd 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4824      	ldr	r0, [pc, #144]	; (8000abc <MX_GPIO_Init+0x1b0>)
 8000a2c:	f001 f940 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a30:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0x1a4>)
 8000a4a:	f001 f931 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <MX_GPIO_Init+0x1a8>)
 8000a68:	f001 f922 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <MX_GPIO_Init+0x1b4>)
 8000a82:	f001 f915 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000a9e:	f001 f907 	bl	8001cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3730      	adds	r7, #48	; 0x30
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	58024400 	.word	0x58024400
 8000ab0:	58020400 	.word	0x58020400
 8000ab4:	58020c00 	.word	0x58020c00
 8000ab8:	58021000 	.word	0x58021000
 8000abc:	58020800 	.word	0x58020800
 8000ac0:	58021800 	.word	0x58021800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x30>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x30>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	58024400 	.word	0x58024400

08000b04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <HAL_ETH_MspInit+0x184>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f040 80ab 	bne.w	8000c7e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b28:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b2e:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b4c:	4a4f      	ldr	r2, [pc, #316]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6a:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bfa:	2332      	movs	r3, #50	; 0x32
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <HAL_ETH_MspInit+0x18c>)
 8000c16:	f001 f84b 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c1a:	2386      	movs	r3, #134	; 0x86
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_ETH_MspInit+0x190>)
 8000c36:	f001 f83b 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <HAL_ETH_MspInit+0x194>)
 8000c58:	f001 f82a 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <HAL_ETH_MspInit+0x198>)
 8000c7a:	f001 f819 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40028000 	.word	0x40028000
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020000 	.word	0x58020000
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	58021800 	.word	0x58021800

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ba      	sub	sp, #232	; 0xe8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	22c0      	movs	r2, #192	; 0xc0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fe6b 	bl	800699c <memset>
  if(hi2c->Instance==I2C1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_I2C_MspInit+0xc4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d145      	bne.n	8000d5c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd0:	f04f 0208 	mov.w	r2, #8
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 fc4c 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cf2:	f7ff fee7 	bl	8000ac4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_I2C_MspInit+0xc8>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <HAL_I2C_MspInit+0xc8>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_I2C_MspInit+0xc8>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1a:	2312      	movs	r3, #18
 8000d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <HAL_I2C_MspInit+0xcc>)
 8000d3a:	f000 ffb9 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_I2C_MspInit+0xc8>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_I2C_MspInit+0xc8>)
 8000d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_I2C_MspInit+0xc8>)
 8000d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	37e8      	adds	r7, #232	; 0xe8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40005400 	.word	0x40005400
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020400 	.word	0x58020400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0ba      	sub	sp, #232	; 0xe8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	22c0      	movs	r2, #192	; 0xc0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f005 fe03 	bl	800699c <memset>
  if(huart->Instance==USART3)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <HAL_UART_MspInit+0xc8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d146      	bne.n	8000e2e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000da0:	f04f 0202 	mov.w	r2, #2
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fbe4 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dc2:	f7ff fe7f 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_UART_MspInit+0xd0>)
 8000e2a:	f000 ff41 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	37e8      	adds	r7, #232	; 0xe8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40004800 	.word	0x40004800
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58020c00 	.word	0x58020c00

08000e44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ba      	sub	sp, #232	; 0xe8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	22c0      	movs	r2, #192	; 0xc0
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 fd99 	bl	800699c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a30      	ldr	r2, [pc, #192]	; (8000f30 <HAL_PCD_MspInit+0xec>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d159      	bne.n	8000f28 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fb79 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e98:	f7ff fe14 	bl	8000ac4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e9c:	f001 fb7c 	bl	8002598 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ebe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <HAL_PCD_MspInit+0xf4>)
 8000ee6:	f000 fee3 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <HAL_PCD_MspInit+0xf4>)
 8000f06:	f000 fed3 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_PCD_MspInit+0xf0>)
 8000f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	37e8      	adds	r7, #232	; 0xe8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40080000 	.word	0x40080000
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58020000 	.word	0x58020000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f926 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <SystemInit+0xe4>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a36      	ldr	r2, [pc, #216]	; (8001074 <SystemInit+0xe4>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <SystemInit+0xe8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	2b06      	cmp	r3, #6
 8000fae:	d807      	bhi.n	8000fc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <SystemInit+0xe8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 030f 	bic.w	r3, r3, #15
 8000fb8:	4a2f      	ldr	r2, [pc, #188]	; (8001078 <SystemInit+0xe8>)
 8000fba:	f043 0307 	orr.w	r3, r3, #7
 8000fbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <SystemInit+0xec>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a2d      	ldr	r2, [pc, #180]	; (800107c <SystemInit+0xec>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <SystemInit+0xec>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <SystemInit+0xec>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4929      	ldr	r1, [pc, #164]	; (800107c <SystemInit+0xec>)
 8000fd8:	4b29      	ldr	r3, [pc, #164]	; (8001080 <SystemInit+0xf0>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <SystemInit+0xe8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d007      	beq.n	8000ffa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <SystemInit+0xe8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 030f 	bic.w	r3, r3, #15
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemInit+0xe8>)
 8000ff4:	f043 0307 	orr.w	r3, r3, #7
 8000ff8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <SystemInit+0xec>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <SystemInit+0xec>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <SystemInit+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <SystemInit+0xec>)
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <SystemInit+0xf4>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <SystemInit+0xec>)
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <SystemInit+0xf8>)
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <SystemInit+0xec>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <SystemInit+0xfc>)
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <SystemInit+0xec>)
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <SystemInit+0xec>)
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <SystemInit+0xfc>)
 8001028:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <SystemInit+0xec>)
 800102c:	2200      	movs	r2, #0
 800102e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <SystemInit+0xec>)
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <SystemInit+0xfc>)
 8001034:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <SystemInit+0xec>)
 8001038:	2200      	movs	r2, #0
 800103a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <SystemInit+0xec>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <SystemInit+0xec>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <SystemInit+0xec>)
 800104a:	2200      	movs	r2, #0
 800104c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <SystemInit+0x100>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <SystemInit+0x104>)
 8001054:	4013      	ands	r3, r2
 8001056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800105a:	d202      	bcs.n	8001062 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <SystemInit+0x108>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <SystemInit+0x10c>)
 8001064:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001068:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	52002000 	.word	0x52002000
 800107c:	58024400 	.word	0x58024400
 8001080:	eaf6ed7f 	.word	0xeaf6ed7f
 8001084:	02020200 	.word	0x02020200
 8001088:	01ff0000 	.word	0x01ff0000
 800108c:	01010280 	.word	0x01010280
 8001090:	5c001000 	.word	0x5c001000
 8001094:	ffff0000 	.word	0xffff0000
 8001098:	51008108 	.word	0x51008108
 800109c:	52004000 	.word	0x52004000

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a4:	f7ff ff74 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	; (80010ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f005 fc6d 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fa7f 	bl	80005d4 <main>
  bx  lr
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010e0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010e4:	08006a54 	.word	0x08006a54
  ldr r2, =_sbss
 80010e8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80010ec:	240007d4 	.word	0x240007d4

080010f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC3_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 f982 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001100:	f002 f86a 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8001104:	4602      	mov	r2, r0
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_Init+0x68>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	0a1b      	lsrs	r3, r3, #8
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4913      	ldr	r1, [pc, #76]	; (8001160 <HAL_Init+0x6c>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_Init+0x68>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_Init+0x6c>)
 8001128:	5cd3      	ldrb	r3, [r2, r3]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_Init+0x70>)
 8001136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_Init+0x74>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f814 	bl	800116c <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e002      	b.n	8001154 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800114e:	f7ff fcbf 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024400 	.word	0x58024400
 8001160:	08006a0c 	.word	0x08006a0c
 8001164:	24000004 	.word	0x24000004
 8001168:	24000000 	.word	0x24000000

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e021      	b.n	80011c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_InitTick+0x64>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_InitTick+0x60>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f959 	bl	800144e <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f931 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <HAL_InitTick+0x68>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2400000c 	.word	0x2400000c
 80011d0:	24000000 	.word	0x24000000
 80011d4:	24000008 	.word	0x24000008

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	2400000c 	.word	0x2400000c
 80011fc:	240007d0 	.word	0x240007d0

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	240007d0 	.word	0x240007d0

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2400000c 	.word	0x2400000c

08001260 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetREVID+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0c1b      	lsrs	r3, r3, #16
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	5c001000 	.word	0x5c001000

08001278 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	58000400 	.word	0x58000400

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	05fa0000 	.word	0x05fa0000

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff47 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff5e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffb2 	bl	80013c0 <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0cf      	b.n	800161a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2223      	movs	r2, #35	; 0x23
 8001488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fb39 	bl	8000b04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_ETH_Init+0x1bc>)
 8001494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001498:	4a62      	ldr	r2, [pc, #392]	; (8001624 <HAL_ETH_Init+0x1bc>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014a2:	4b60      	ldr	r3, [pc, #384]	; (8001624 <HAL_ETH_Init+0x1bc>)
 80014a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7a1b      	ldrb	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fedd 	bl	8001278 <HAL_SYSCFG_ETHInterfaceSelect>
 80014be:	e003      	b.n	80014c8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014c4:	f7ff fed8 	bl	8001278 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HAL_ETH_Init+0x1c0>)
 80014ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e4:	f7ff fe8c 	bl	8001200 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014ea:	e011      	b.n	8001510 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014ec:	f7ff fe88 	bl	8001200 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014fa:	d909      	bls.n	8001510 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2204      	movs	r2, #4
 8001500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	22e0      	movs	r2, #224	; 0xe0
 8001508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e084      	b.n	800161a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1e4      	bne.n	80014ec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f886 	bl	8001634 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001528:	f001 ffd0 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 800152c:	4603      	mov	r3, r0
 800152e:	4a3f      	ldr	r2, [pc, #252]	; (800162c <HAL_ETH_Init+0x1c4>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9a      	lsrs	r2, r3, #18
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3a01      	subs	r2, #1
 800153c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 fa71 	bl	8001a28 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001552:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800155e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001562:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	22e0      	movs	r2, #224	; 0xe0
 800157e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e049      	b.n	800161a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_ETH_Init+0x1c8>)
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6952      	ldr	r2, [r2, #20]
 800159a:	0051      	lsls	r1, r2, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fad9 	bl	8001b62 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 fb1f 	bl	8001bf4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	3305      	adds	r3, #5
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	021a      	lsls	r2, r3, #8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	3304      	adds	r3, #4
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	3303      	adds	r3, #3
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	061a      	lsls	r2, r3, #24
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	3302      	adds	r3, #2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	3301      	adds	r3, #1
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001602:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001604:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2210      	movs	r2, #16
 8001614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58024400 	.word	0x58024400
 8001628:	58000400 	.word	0x58000400
 800162c:	431bde83 	.word	0x431bde83
 8001630:	ffff8001 	.word	0xffff8001

08001634 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001644:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800164c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800164e:	f001 ff3d 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 8001652:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d908      	bls.n	800166e <HAL_ETH_SetMDIOClockRange+0x3a>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d804      	bhi.n	800166e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e027      	b.n	80016be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d908      	bls.n	8001688 <HAL_ETH_SetMDIOClockRange+0x54>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d204      	bcs.n	8001688 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e01a      	b.n	80016be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d303      	bcc.n	8001698 <HAL_ETH_SetMDIOClockRange+0x64>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d911      	bls.n	80016bc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d908      	bls.n	80016b2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d804      	bhi.n	80016b2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e005      	b.n	80016be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e000      	b.n	80016be <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80016bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	01312cff 	.word	0x01312cff
 80016d4:	02160ebf 	.word	0x02160ebf
 80016d8:	03938700 	.word	0x03938700
 80016dc:	05f5e0ff 	.word	0x05f5e0ff
 80016e0:	08f0d17f 	.word	0x08f0d17f

080016e4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	791b      	ldrb	r3, [r3, #4]
 80016fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	7b1b      	ldrb	r3, [r3, #12]
 8001704:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001706:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	7b5b      	ldrb	r3, [r3, #13]
 800170c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800170e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7b9b      	ldrb	r3, [r3, #14]
 8001714:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001716:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	7bdb      	ldrb	r3, [r3, #15]
 800171c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800171e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	7c12      	ldrb	r2, [r2, #16]
 8001724:	2a00      	cmp	r2, #0
 8001726:	d102      	bne.n	800172e <ETH_SetMACConfig+0x4a>
 8001728:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800172c:	e000      	b.n	8001730 <ETH_SetMACConfig+0x4c>
 800172e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001730:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	7c52      	ldrb	r2, [r2, #17]
 8001736:	2a00      	cmp	r2, #0
 8001738:	d102      	bne.n	8001740 <ETH_SetMACConfig+0x5c>
 800173a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800173e:	e000      	b.n	8001742 <ETH_SetMACConfig+0x5e>
 8001740:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001742:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	7c9b      	ldrb	r3, [r3, #18]
 8001748:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800174a:	431a      	orrs	r2, r3
               macconf->Speed |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001750:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	7f1b      	ldrb	r3, [r3, #28]
 800175c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800175e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7f5b      	ldrb	r3, [r3, #29]
 8001764:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001766:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	7f92      	ldrb	r2, [r2, #30]
 800176c:	2a00      	cmp	r2, #0
 800176e:	d102      	bne.n	8001776 <ETH_SetMACConfig+0x92>
 8001770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001774:	e000      	b.n	8001778 <ETH_SetMACConfig+0x94>
 8001776:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001778:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	7fdb      	ldrb	r3, [r3, #31]
 800177e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001780:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001788:	2a00      	cmp	r2, #0
 800178a:	d102      	bne.n	8001792 <ETH_SetMACConfig+0xae>
 800178c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001790:	e000      	b.n	8001794 <ETH_SetMACConfig+0xb0>
 8001792:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001794:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800179a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80017a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <ETH_SetMACConfig+0x22c>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	430b      	orrs	r3, r1
 80017c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	d102      	bne.n	80017f6 <ETH_SetMACConfig+0x112>
 80017f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f4:	e000      	b.n	80017f8 <ETH_SetMACConfig+0x114>
 80017f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4b42      	ldr	r3, [pc, #264]	; (8001914 <ETH_SetMACConfig+0x230>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	430b      	orrs	r3, r1
 8001814:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800181c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <ETH_SetMACConfig+0x234>)
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	430b      	orrs	r3, r1
 8001838:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001840:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001846:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800184e:	2a00      	cmp	r2, #0
 8001850:	d101      	bne.n	8001856 <ETH_SetMACConfig+0x172>
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	e000      	b.n	8001858 <ETH_SetMACConfig+0x174>
 8001856:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001858:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001860:	4313      	orrs	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800186a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	430b      	orrs	r3, r1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001880:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001888:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	f023 0103 	bic.w	r1, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80018ae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80018ca:	2a00      	cmp	r2, #0
 80018cc:	d101      	bne.n	80018d2 <ETH_SetMACConfig+0x1ee>
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0x1f0>
 80018d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80018d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80018dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80018e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80018f4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	430a      	orrs	r2, r1
 8001900:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	00048083 	.word	0x00048083
 8001914:	c0f88000 	.word	0xc0f88000
 8001918:	fffffef0 	.word	0xfffffef0

0800191c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <ETH_SetDMAConfig+0xf8>)
 8001932:	4013      	ands	r3, r2
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	6811      	ldr	r1, [r2, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001942:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800194e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7b1b      	ldrb	r3, [r3, #12]
 8001954:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <ETH_SetDMAConfig+0xfc>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	430b      	orrs	r3, r1
 8001970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001974:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7b5b      	ldrb	r3, [r3, #13]
 800197a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <ETH_SetDMAConfig+0x100>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	430b      	orrs	r3, r1
 800199c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	7d1b      	ldrb	r3, [r3, #20]
 80019ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80019ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	7f5b      	ldrb	r3, [r3, #29]
 80019b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <ETH_SetDMAConfig+0x104>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	7f1b      	ldrb	r3, [r3, #28]
 80019de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <ETH_SetDMAConfig+0x108>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	430b      	orrs	r3, r1
 8001a00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a04:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	ffff87fd 	.word	0xffff87fd
 8001a18:	ffff2ffe 	.word	0xffff2ffe
 8001a1c:	fffec000 	.word	0xfffec000
 8001a20:	ffc0efef 	.word	0xffc0efef
 8001a24:	7fc0ffff 	.word	0x7fc0ffff

08001a28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a4      	sub	sp, #144	; 0x90
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a36:	2300      	movs	r3, #0
 8001a38:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a68:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001a80:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001a84:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ad2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ad8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001adc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b02:	2300      	movs	r3, #0
 8001b04:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fde6 	bl	80016e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b48:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fee1 	bl	800191c <ETH_SetDMAConfig>
}
 8001b5a:	bf00      	nop
 8001b5c:	3790      	adds	r7, #144	; 0x90
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e01d      	b.n	8001bac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68d9      	ldr	r1, [r3, #12]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	440b      	add	r3, r1
 8001b80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	3206      	adds	r2, #6
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d9de      	bls.n	8001b70 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e023      	b.n	8001c4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6919      	ldr	r1, [r3, #16]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	3212      	adds	r2, #18
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d9d8      	bls.n	8001c02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	461a      	mov	r2, r3
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_GPIO_Init+0x234>)
 8001cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cc2:	e194      	b.n	8001fee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8186 	beq.w	8001fe8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d005      	beq.n	8001cf4 <HAL_GPIO_Init+0x44>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d130      	bne.n	8001d56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0201 	and.w	r2, r3, #1
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d017      	beq.n	8001d92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d123      	bne.n	8001de6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	69b9      	ldr	r1, [r7, #24]
 8001de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0203 	and.w	r2, r3, #3
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80e0 	beq.w	8001fe8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <HAL_GPIO_Init+0x238>)
 8001e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <HAL_GPIO_Init+0x238>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_GPIO_Init+0x238>)
 8001e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_GPIO_Init+0x23c>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_GPIO_Init+0x240>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d052      	beq.n	8001f18 <HAL_GPIO_Init+0x268>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_GPIO_Init+0x244>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d031      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_GPIO_Init+0x248>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d02b      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_GPIO_Init+0x24c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_GPIO_Init+0x250>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_GPIO_Init+0x254>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	; (8001f08 <HAL_GPIO_Init+0x258>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x21a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_GPIO_Init+0x25c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x216>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x260>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x212>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_GPIO_Init+0x264>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x20e>
 8001eba:	2309      	movs	r3, #9
 8001ebc:	e02d      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	e02b      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	e029      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e027      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e025      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ece:	2305      	movs	r3, #5
 8001ed0:	e023      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e021      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e01f      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01d      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e01b      	b.n	8001f1a <HAL_GPIO_Init+0x26a>
 8001ee2:	bf00      	nop
 8001ee4:	58000080 	.word	0x58000080
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	58000400 	.word	0x58000400
 8001ef0:	58020000 	.word	0x58020000
 8001ef4:	58020400 	.word	0x58020400
 8001ef8:	58020800 	.word	0x58020800
 8001efc:	58020c00 	.word	0x58020c00
 8001f00:	58021000 	.word	0x58021000
 8001f04:	58021400 	.word	0x58021400
 8001f08:	58021800 	.word	0x58021800
 8001f0c:	58021c00 	.word	0x58021c00
 8001f10:	58022000 	.word	0x58022000
 8001f14:	58022400 	.word	0x58022400
 8001f18:	2300      	movs	r3, #0
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2a:	4938      	ldr	r1, [pc, #224]	; (800200c <HAL_GPIO_Init+0x35c>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f ae63 	bne.w	8001cc4 <HAL_GPIO_Init+0x14>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3724      	adds	r7, #36	; 0x24
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	58000400 	.word	0x58000400

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fe18 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	e006      	b.n	80020cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d104      	bne.n	80020de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_I2C_Init+0x11c>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	02008000 	.word	0x02008000

08002164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	d138      	bne.n	80021ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002184:	2302      	movs	r3, #2
 8002186:	e032      	b.n	80021ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	d139      	bne.n	8002284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800221a:	2302      	movs	r3, #2
 800221c:	e033      	b.n	8002286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2224      	movs	r2, #36	; 0x24
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002294:	b08f      	sub	sp, #60	; 0x3c
 8002296:	af0a      	add	r7, sp, #40	; 0x28
 8002298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e116      	b.n	80024d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fdc0 	bl	8000e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 f8be 	bl	8006464 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	687e      	ldr	r6, [r7, #4]
 80022f0:	466d      	mov	r5, sp
 80022f2:	f106 0410 	add.w	r4, r6, #16
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002302:	e885 0003 	stmia.w	r5, {r0, r1}
 8002306:	1d33      	adds	r3, r6, #4
 8002308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f004 f83c 	bl	8006388 <USB_CoreInit>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0d7      	b.n	80024d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f004 f8ac 	bl	8006486 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e04a      	b.n	80023ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	333d      	adds	r3, #61	; 0x3d
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	333c      	adds	r3, #60	; 0x3c
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	b298      	uxth	r0, r3
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3356      	adds	r3, #86	; 0x56
 8002370:	4602      	mov	r2, r0
 8002372:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3340      	adds	r3, #64	; 0x40
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	3344      	adds	r3, #68	; 0x44
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3348      	adds	r3, #72	; 0x48
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	334c      	adds	r3, #76	; 0x4c
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	3301      	adds	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3af      	bcc.n	8002334 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e044      	b.n	8002464 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3b5      	bcc.n	80023da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	687e      	ldr	r6, [r7, #4]
 8002476:	466d      	mov	r5, sp
 8002478:	f106 0410 	add.w	r4, r6, #16
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002488:	e885 0003 	stmia.w	r5, {r0, r1}
 800248c:	1d33      	adds	r3, r6, #4
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f004 f845 	bl	8006520 <USB_DevInit>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e014      	b.n	80024d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f80b 	bl	80024dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fa03 	bl	80068d6 <USB_DevDisconnect>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_PCDEx_ActivateLPM+0x44>)
 800250c:	4313      	orrs	r3, r2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	10000003 	.word	0x10000003

08002524 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_PWREx_ConfigSupply+0x70>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00a      	beq.n	800254e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_PWREx_ConfigSupply+0x70>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e01f      	b.n	800258a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e01d      	b.n	800258a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_PWREx_ConfigSupply+0x70>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	490f      	ldr	r1, [pc, #60]	; (8002594 <HAL_PWREx_ConfigSupply+0x70>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800255e:	f7fe fe4f 	bl	8001200 <HAL_GetTick>
 8002562:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002564:	e009      	b.n	800257a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002566:	f7fe fe4b 	bl	8001200 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002574:	d901      	bls.n	800257a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_PWREx_ConfigSupply+0x70>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	d1ee      	bne.n	8002566 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	58024800 	.word	0x58024800

08002598 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	58024800 	.word	0x58024800

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	; 0x30
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f000 bc48 	b.w	8002e5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8088 	beq.w	80026ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4b99      	ldr	r3, [pc, #612]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e4:	4b96      	ldr	r3, [pc, #600]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d007      	beq.n	8002600 <HAL_RCC_OscConfig+0x48>
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	2b18      	cmp	r3, #24
 80025f4:	d111      	bne.n	800261a <HAL_RCC_OscConfig+0x62>
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d10c      	bne.n	800261a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	4b8f      	ldr	r3, [pc, #572]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d06d      	beq.n	80026e8 <HAL_RCC_OscConfig+0x130>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d169      	bne.n	80026e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f000 bc21 	b.w	8002e5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x7a>
 8002624:	4b86      	ldr	r3, [pc, #536]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a85      	ldr	r2, [pc, #532]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e02e      	b.n	8002690 <HAL_RCC_OscConfig+0xd8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x9c>
 800263a:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7d      	ldr	r2, [pc, #500]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800264c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0xd8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0xc0>
 800265e:	4b78      	ldr	r3, [pc, #480]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a77      	ldr	r2, [pc, #476]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a74      	ldr	r2, [pc, #464]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xd8>
 8002678:	4b71      	ldr	r3, [pc, #452]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a70      	ldr	r2, [pc, #448]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b6e      	ldr	r3, [pc, #440]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6d      	ldr	r2, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe fdb2 	bl	8001200 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fdae 	bl	8001200 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e3d4      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b2:	4b63      	ldr	r3, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0xe8>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fd9e 	bl	8001200 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fd9a 	bl	8001200 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e3c0      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026da:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x110>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80ca 	beq.w	800288c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f8:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002700:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002702:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_RCC_OscConfig+0x166>
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2b18      	cmp	r3, #24
 8002712:	d156      	bne.n	80027c2 <HAL_RCC_OscConfig+0x20a>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d151      	bne.n	80027c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271e:	4b48      	ldr	r3, [pc, #288]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x17e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e392      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002736:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0219 	bic.w	r2, r3, #25
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	493f      	ldr	r1, [pc, #252]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fd5a 	bl	8001200 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fd56 	bl	8001200 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e37c      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	f7fe fd77 	bl	8001260 <HAL_GetREVID>
 8002772:	4603      	mov	r3, r0
 8002774:	f241 0203 	movw	r2, #4099	; 0x1003
 8002778:	4293      	cmp	r3, r2
 800277a:	d817      	bhi.n	80027ac <HAL_RCC_OscConfig+0x1f4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d108      	bne.n	8002796 <HAL_RCC_OscConfig+0x1de>
 8002784:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800278c:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800278e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002792:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002794:	e07a      	b.n	800288c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	031b      	lsls	r3, r3, #12
 80027a4:	4926      	ldr	r1, [pc, #152]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027aa:	e06f      	b.n	800288c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	4921      	ldr	r1, [pc, #132]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c0:	e064      	b.n	800288c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d047      	beq.n	800285a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0219 	bic.w	r2, r3, #25
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	491a      	ldr	r1, [pc, #104]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fd10 	bl	8001200 <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fd0c 	bl	8001200 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e332      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	f7fe fd2d 	bl	8001260 <HAL_GetREVID>
 8002806:	4603      	mov	r3, r0
 8002808:	f241 0203 	movw	r2, #4099	; 0x1003
 800280c:	4293      	cmp	r3, r2
 800280e:	d819      	bhi.n	8002844 <HAL_RCC_OscConfig+0x28c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x272>
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	6053      	str	r3, [r2, #4]
 8002828:	e030      	b.n	800288c <HAL_RCC_OscConfig+0x2d4>
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	031b      	lsls	r3, r3, #12
 8002838:	4901      	ldr	r1, [pc, #4]	; (8002840 <HAL_RCC_OscConfig+0x288>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e025      	b.n	800288c <HAL_RCC_OscConfig+0x2d4>
 8002840:	58024400 	.word	0x58024400
 8002844:	4b9a      	ldr	r3, [pc, #616]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4997      	ldr	r1, [pc, #604]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b95      	ldr	r3, [pc, #596]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a94      	ldr	r2, [pc, #592]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe fccb 	bl	8001200 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7fe fcc7 	bl	8001200 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e2ed      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002880:	4b8b      	ldr	r3, [pc, #556]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a9 	beq.w	80029ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a4:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d007      	beq.n	80028c0 <HAL_RCC_OscConfig+0x308>
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	d13a      	bne.n	800292c <HAL_RCC_OscConfig+0x374>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d135      	bne.n	800292c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c0:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_OscConfig+0x320>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e2c1      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d8:	f7fe fcc2 	bl	8001260 <HAL_GetREVID>
 80028dc:	4603      	mov	r3, r0
 80028de:	f241 0203 	movw	r2, #4099	; 0x1003
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d817      	bhi.n	8002916 <HAL_RCC_OscConfig+0x35e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x348>
 80028ee:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028f6:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fe:	e075      	b.n	80029ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002900:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	069b      	lsls	r3, r3, #26
 800290e:	4968      	ldr	r1, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002914:	e06a      	b.n	80029ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002916:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	4962      	ldr	r1, [pc, #392]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800292a:	e05f      	b.n	80029ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d042      	beq.n	80029ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002934:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5d      	ldr	r2, [pc, #372]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fc5e 	bl	8001200 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002948:	f7fe fc5a 	bl	8001200 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e280      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800295a:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002966:	f7fe fc7b 	bl	8001260 <HAL_GetREVID>
 800296a:	4603      	mov	r3, r0
 800296c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002970:	4293      	cmp	r3, r2
 8002972:	d817      	bhi.n	80029a4 <HAL_RCC_OscConfig+0x3ec>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	2b20      	cmp	r3, #32
 800297a:	d108      	bne.n	800298e <HAL_RCC_OscConfig+0x3d6>
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800298a:	6053      	str	r3, [r2, #4]
 800298c:	e02e      	b.n	80029ec <HAL_RCC_OscConfig+0x434>
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	069b      	lsls	r3, r3, #26
 800299c:	4944      	ldr	r1, [pc, #272]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e023      	b.n	80029ec <HAL_RCC_OscConfig+0x434>
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	493f      	ldr	r1, [pc, #252]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
 80029b8:	e018      	b.n	80029ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fc1b 	bl	8001200 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ce:	f7fe fc17 	bl	8001200 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e23d      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029e0:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d036      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d019      	beq.n	8002a34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fbf8 	bl	8001200 <HAL_GetTick>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe fbf4 	bl	8001200 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e21a      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x45c>
 8002a32:	e018      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fbde 	bl	8001200 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fbda 	bl	8001200 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e200      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d039      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fbbb 	bl	8001200 <HAL_GetTick>
 8002a8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8e:	f7fe fbb7 	bl	8001200 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1dd      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x4d6>
 8002aac:	e01b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x52e>
 8002aae:	bf00      	nop
 8002ab0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab4:	4b9b      	ldr	r3, [pc, #620]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a9a      	ldr	r2, [pc, #616]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fb9e 	bl	8001200 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac8:	f7fe fb9a 	bl	8001200 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e1c0      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ada:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8081 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af4:	4b8c      	ldr	r3, [pc, #560]	; (8002d28 <HAL_RCC_OscConfig+0x770>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a8b      	ldr	r2, [pc, #556]	; (8002d28 <HAL_RCC_OscConfig+0x770>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fb7e 	bl	8001200 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fe fb7a 	bl	8001200 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1a0      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1a:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_RCC_OscConfig+0x770>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_OscConfig+0x584>
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a7c      	ldr	r2, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	e02d      	b.n	8002b98 <HAL_RCC_OscConfig+0x5e0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x5a6>
 8002b44:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a76      	ldr	r2, [pc, #472]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a73      	ldr	r2, [pc, #460]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	f023 0304 	bic.w	r3, r3, #4
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x5e0>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c8>
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a6e      	ldr	r2, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a6b      	ldr	r2, [pc, #428]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x5e0>
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8c:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a64      	ldr	r2, [pc, #400]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fb2e 	bl	8001200 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb2a 	bl	8001200 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e14e      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bbe:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x5f0>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fb18 	bl	8001200 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fb14 	bl	8001200 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e138      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bea:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 812d 	beq.w	8002e5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c00:	4b48      	ldr	r3, [pc, #288]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c08:	2b18      	cmp	r3, #24
 8002c0a:	f000 80bd 	beq.w	8002d88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	f040 809e 	bne.w	8002d54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c18:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a41      	ldr	r2, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe faec 	bl	8001200 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fae8 	bl	8001200 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e10e      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_OscConfig+0x774>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	4931      	ldr	r1, [pc, #196]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	628b      	str	r3, [r1, #40]	; 0x28
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	3b01      	subs	r3, #1
 8002c74:	025b      	lsls	r3, r3, #9
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	061b      	lsls	r3, r3, #24
 8002c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c94:	4923      	ldr	r1, [pc, #140]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <HAL_RCC_OscConfig+0x778>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cb2:	00d2      	lsls	r2, r2, #3
 8002cb4:	491b      	ldr	r1, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f023 020c 	bic.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4917      	ldr	r1, [pc, #92]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f023 0202 	bic.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	4912      	ldr	r1, [pc, #72]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fa71 	bl	8001200 <HAL_GetTick>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d20:	e011      	b.n	8002d46 <HAL_RCC_OscConfig+0x78e>
 8002d22:	bf00      	nop
 8002d24:	58024400 	.word	0x58024400
 8002d28:	58024800 	.word	0x58024800
 8002d2c:	fffffc0c 	.word	0xfffffc0c
 8002d30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fa64 	bl	8001200 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e08a      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x77c>
 8002d52:	e082      	b.n	8002e5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d54:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe fa4e 	bl	8001200 <HAL_GetTick>
 8002d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe fa4a 	bl	8001200 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e070      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x7b0>
 8002d86:	e068      	b.n	8002e5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d88:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d8e:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d031      	beq.n	8002e00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d12a      	bne.n	8002e00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d122      	bne.n	8002e00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d11a      	bne.n	8002e00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	0a5b      	lsrs	r3, r3, #9
 8002dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d111      	bne.n	8002e00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	0c1b      	lsrs	r3, r3, #16
 8002de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0e1b      	lsrs	r3, r3, #24
 8002df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e02b      	b.n	8002e5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d01f      	beq.n	8002e5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e26:	f7fe f9eb 	bl	8001200 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e2c:	bf00      	nop
 8002e2e:	f7fe f9e7 	bl	8001200 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d0f9      	beq.n	8002e2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_OscConfig+0x8b0>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e46:	00d2      	lsls	r2, r2, #3
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_RCC_OscConfig+0x8ac>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58024400 	.word	0x58024400
 8002e68:	ffff0007 	.word	0xffff0007

08002e6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e19c      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b8a      	ldr	r3, [pc, #552]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b87      	ldr	r3, [pc, #540]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 020f 	bic.w	r2, r3, #15
 8002e96:	4985      	ldr	r1, [pc, #532]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e184      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d908      	bls.n	8002ede <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ecc:	4b78      	ldr	r3, [pc, #480]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	4975      	ldr	r1, [pc, #468]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d908      	bls.n	8002f0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	496a      	ldr	r1, [pc, #424]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d908      	bls.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f28:	4b61      	ldr	r3, [pc, #388]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	495e      	ldr	r1, [pc, #376]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d908      	bls.n	8002f68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f56:	4b56      	ldr	r3, [pc, #344]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4953      	ldr	r1, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f023 020f 	bic.w	r2, r3, #15
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4947      	ldr	r1, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d055      	beq.n	800304e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	4940      	ldr	r1, [pc, #256]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fbc:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d121      	bne.n	800300c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0f6      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd4:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d115      	bne.n	800300c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ea      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0de      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d6      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4925      	ldr	r1, [pc, #148]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 800301a:	4313      	orrs	r3, r2
 800301c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301e:	f7fe f8ef 	bl	8001200 <HAL_GetTick>
 8003022:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	e00a      	b.n	800303c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003026:	f7fe f8eb 	bl	8001200 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0be      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	429a      	cmp	r2, r3
 800304c:	d1eb      	bne.n	8003026 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	429a      	cmp	r2, r3
 8003068:	d208      	bcs.n	800307c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x244>)
 8003078:	4313      	orrs	r3, r2
 800307a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d214      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 020f 	bic.w	r2, r3, #15
 8003092:	4906      	ldr	r1, [pc, #24]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_RCC_ClockConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e086      	b.n	80031ba <HAL_RCC_ClockConfig+0x34e>
 80030ac:	52002000 	.word	0x52002000
 80030b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d208      	bcs.n	80030e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030d0:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	4939      	ldr	r1, [pc, #228]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d208      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	492e      	ldr	r1, [pc, #184]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 800310c:	4313      	orrs	r3, r2
 800310e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003128:	429a      	cmp	r2, r3
 800312a:	d208      	bcs.n	800313e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4922      	ldr	r1, [pc, #136]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 800313a:	4313      	orrs	r3, r2
 800313c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003156:	429a      	cmp	r2, r3
 8003158:	d208      	bcs.n	800316c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 8003168:	4313      	orrs	r3, r2
 800316a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800316c:	f000 f834 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	4912      	ldr	r1, [pc, #72]	; (80031c8 <HAL_RCC_ClockConfig+0x35c>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x358>)
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <HAL_RCC_ClockConfig+0x35c>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x360>)
 80031a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x364>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_ClockConfig+0x368>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd ffdc 	bl	800116c <HAL_InitTick>
 80031b4:	4603      	mov	r3, r0
 80031b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	58024400 	.word	0x58024400
 80031c8:	08006a0c 	.word	0x08006a0c
 80031cc:	24000004 	.word	0x24000004
 80031d0:	24000000 	.word	0x24000000
 80031d4:	24000008 	.word	0x24000008

080031d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031de:	4bb3      	ldr	r3, [pc, #716]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e6:	2b18      	cmp	r3, #24
 80031e8:	f200 8155 	bhi.w	8003496 <HAL_RCC_GetSysClockFreq+0x2be>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003259 	.word	0x08003259
 80031f8:	08003497 	.word	0x08003497
 80031fc:	08003497 	.word	0x08003497
 8003200:	08003497 	.word	0x08003497
 8003204:	08003497 	.word	0x08003497
 8003208:	08003497 	.word	0x08003497
 800320c:	08003497 	.word	0x08003497
 8003210:	08003497 	.word	0x08003497
 8003214:	0800327f 	.word	0x0800327f
 8003218:	08003497 	.word	0x08003497
 800321c:	08003497 	.word	0x08003497
 8003220:	08003497 	.word	0x08003497
 8003224:	08003497 	.word	0x08003497
 8003228:	08003497 	.word	0x08003497
 800322c:	08003497 	.word	0x08003497
 8003230:	08003497 	.word	0x08003497
 8003234:	08003285 	.word	0x08003285
 8003238:	08003497 	.word	0x08003497
 800323c:	08003497 	.word	0x08003497
 8003240:	08003497 	.word	0x08003497
 8003244:	08003497 	.word	0x08003497
 8003248:	08003497 	.word	0x08003497
 800324c:	08003497 	.word	0x08003497
 8003250:	08003497 	.word	0x08003497
 8003254:	0800328b 	.word	0x0800328b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003258:	4b94      	ldr	r3, [pc, #592]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003264:	4b91      	ldr	r3, [pc, #580]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	4a90      	ldr	r2, [pc, #576]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
 8003274:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003276:	e111      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003278:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800327a:	61bb      	str	r3, [r7, #24]
      break;
 800327c:	e10e      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800327e:	4b8d      	ldr	r3, [pc, #564]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003280:	61bb      	str	r3, [r7, #24]
      break;
 8003282:	e10b      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003284:	4b8c      	ldr	r3, [pc, #560]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003286:	61bb      	str	r3, [r7, #24]
      break;
 8003288:	e108      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800328a:	4b88      	ldr	r3, [pc, #544]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003294:	4b85      	ldr	r3, [pc, #532]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032a0:	4b82      	ldr	r3, [pc, #520]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032aa:	4b80      	ldr	r3, [pc, #512]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	08db      	lsrs	r3, r3, #3
 80032b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80e1 	beq.w	8003490 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	f000 8083 	beq.w	80033dc <HAL_RCC_GetSysClockFreq+0x204>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f200 80a1 	bhi.w	8003420 <HAL_RCC_GetSysClockFreq+0x248>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x114>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d056      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032ea:	e099      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ec:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02d      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032f8:	4b6c      	ldr	r3, [pc, #432]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	4a6b      	ldr	r2, [pc, #428]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	ee07 3a90 	vmov	s15, r3
 8003310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003322:	4b62      	ldr	r3, [pc, #392]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003332:	ed97 6a02 	vldr	s12, [r7, #8]
 8003336:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800333a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003352:	e087      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003366:	4b51      	ldr	r3, [pc, #324]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003376:	ed97 6a02 	vldr	s12, [r7, #8]
 800337a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800337e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003396:	e065      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033aa:	4b40      	ldr	r3, [pc, #256]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80033be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80033c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033da:	e043      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ee:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003402:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800341e:	e021      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800342e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003442:	ed97 6a02 	vldr	s12, [r7, #8]
 8003446:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800344a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003462:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	0a5b      	lsrs	r3, r3, #9
 800346a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346e:	3301      	adds	r3, #1
 8003470:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800347c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003488:	ee17 3a90 	vmov	r3, s15
 800348c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800348e:	e005      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
      break;
 8003494:	e002      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003498:	61bb      	str	r3, [r7, #24]
      break;
 800349a:	bf00      	nop
  }

  return sysclockfreq;
 800349c:	69bb      	ldr	r3, [r7, #24]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	58024400 	.word	0x58024400
 80034b0:	03d09000 	.word	0x03d09000
 80034b4:	003d0900 	.word	0x003d0900
 80034b8:	007a1200 	.word	0x007a1200
 80034bc:	46000000 	.word	0x46000000
 80034c0:	4c742400 	.word	0x4c742400
 80034c4:	4a742400 	.word	0x4a742400
 80034c8:	4af42400 	.word	0x4af42400

080034cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034d2:	f7ff fe81 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_GetHCLKFreq+0x50>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	490f      	ldr	r1, [pc, #60]	; (8003520 <HAL_RCC_GetHCLKFreq+0x54>)
 80034e4:	5ccb      	ldrb	r3, [r1, r3]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_RCC_GetHCLKFreq+0x50>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_GetHCLKFreq+0x54>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_RCC_GetHCLKFreq+0x58>)
 8003508:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_RCC_GetHCLKFreq+0x5c>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_RCC_GetHCLKFreq+0x58>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	58024400 	.word	0x58024400
 8003520:	08006a0c 	.word	0x08006a0c
 8003524:	24000004 	.word	0x24000004
 8003528:	24000000 	.word	0x24000000

0800352c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003530:	f7ff ffcc 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4904      	ldr	r1, [pc, #16]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	58024400 	.word	0x58024400
 8003554:	08006a0c 	.word	0x08006a0c

08003558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800355c:	f7ff ffb6 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	58024400 	.word	0x58024400
 8003580:	08006a0c 	.word	0x08006a0c

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003588:	b0ca      	sub	sp, #296	; 0x128
 800358a:	af00      	add	r7, sp, #0
 800358c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80035a8:	2500      	movs	r5, #0
 80035aa:	ea54 0305 	orrs.w	r3, r4, r5
 80035ae:	d049      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ba:	d02f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c0:	d828      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c6:	d01a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035cc:	d822      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d6:	d007      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035d8:	e01c      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035da:	4bb8      	ldr	r3, [pc, #736]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4ab7      	ldr	r2, [pc, #732]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035e6:	e01a      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ec:	3308      	adds	r3, #8
 80035ee:	2102      	movs	r1, #2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f001 fc8f 	bl	8004f14 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035fc:	e00f      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003602:	3328      	adds	r3, #40	; 0x28
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fd36 	bl	8005078 <RCCEx_PLL3_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003612:	e004      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003626:	4ba5      	ldr	r3, [pc, #660]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003634:	4aa1      	ldr	r2, [pc, #644]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003636:	430b      	orrs	r3, r1
 8003638:	6513      	str	r3, [r2, #80]	; 0x50
 800363a:	e003      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003650:	f04f 0900 	mov.w	r9, #0
 8003654:	ea58 0309 	orrs.w	r3, r8, r9
 8003658:	d047      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	2b04      	cmp	r3, #4
 8003662:	d82a      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	08003681 	.word	0x08003681
 8003670:	0800368f 	.word	0x0800368f
 8003674:	080036a5 	.word	0x080036a5
 8003678:	080036c3 	.word	0x080036c3
 800367c:	080036c3 	.word	0x080036c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003680:	4b8e      	ldr	r3, [pc, #568]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4a8d      	ldr	r2, [pc, #564]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800368c:	e01a      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003692:	3308      	adds	r3, #8
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fc3c 	bl	8004f14 <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036a2:	e00f      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a8:	3328      	adds	r3, #40	; 0x28
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fce3 	bl	8005078 <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b8:	e004      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c0:	e000      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036cc:	4b7b      	ldr	r3, [pc, #492]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	f023 0107 	bic.w	r1, r3, #7
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	4a78      	ldr	r2, [pc, #480]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	6513      	str	r3, [r2, #80]	; 0x50
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80036f6:	f04f 0b00 	mov.w	fp, #0
 80036fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80036fe:	d04c      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370a:	d030      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	d829      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003712:	2bc0      	cmp	r3, #192	; 0xc0
 8003714:	d02d      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003716:	2bc0      	cmp	r3, #192	; 0xc0
 8003718:	d825      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d018      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800371e:	2b80      	cmp	r3, #128	; 0x80
 8003720:	d821      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d007      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800372a:	e01c      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4a62      	ldr	r2, [pc, #392]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003738:	e01c      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	3308      	adds	r3, #8
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f001 fbe6 	bl	8004f14 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800374e:	e011      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003754:	3328      	adds	r3, #40	; 0x28
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fc8d 	bl	8005078 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003764:	e006      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800376c:	e002      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800377c:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378c:	430b      	orrs	r3, r1
 800378e:	6513      	str	r3, [r2, #80]	; 0x50
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80037b4:	460b      	mov	r3, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	d053      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c6:	d035      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037cc:	d82e      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037d2:	d031      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037d8:	d828      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037de:	d01a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e4:	d822      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ee:	d007      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037f0:	e01c      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f2:	4b32      	ldr	r3, [pc, #200]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	4a31      	ldr	r2, [pc, #196]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037fe:	e01c      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003804:	3308      	adds	r3, #8
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fb83 	bl	8004f14 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003814:	e011      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381a:	3328      	adds	r3, #40	; 0x28
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fc2a 	bl	8005078 <RCCEx_PLL3_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800382a:	e006      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003832:	e002      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003854:	430b      	orrs	r3, r1
 8003856:	6593      	str	r3, [r2, #88]	; 0x58
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800386e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003878:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800387c:	460b      	mov	r3, r1
 800387e:	4313      	orrs	r3, r2
 8003880:	d056      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800388a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388e:	d038      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003894:	d831      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800389a:	d034      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800389c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038a0:	d82b      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a6:	d01d      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ac:	d825      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038b8:	e01f      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c0:	4ba2      	ldr	r3, [pc, #648]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4aa1      	ldr	r2, [pc, #644]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038cc:	e01c      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d2:	3308      	adds	r3, #8
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fb1c 	bl	8004f14 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038e2:	e011      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	3328      	adds	r3, #40	; 0x28
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fbc3 	bl	8005078 <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003910:	4b8e      	ldr	r3, [pc, #568]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003920:	4a8a      	ldr	r2, [pc, #552]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003922:	430b      	orrs	r3, r1
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
 8003926:	e003      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800392c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800393c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003946:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800394a:	460b      	mov	r3, r1
 800394c:	4313      	orrs	r3, r2
 800394e:	d03a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	2b30      	cmp	r3, #48	; 0x30
 8003958:	d01f      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800395a:	2b30      	cmp	r3, #48	; 0x30
 800395c:	d819      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800395e:	2b20      	cmp	r3, #32
 8003960:	d00c      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003962:	2b20      	cmp	r3, #32
 8003964:	d815      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800396a:	2b10      	cmp	r3, #16
 800396c:	d111      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396e:	4b77      	ldr	r3, [pc, #476]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4a76      	ldr	r2, [pc, #472]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800397a:	e011      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	3308      	adds	r3, #8
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f001 fac5 	bl	8004f14 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003990:	e006      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800399e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039a8:	4b68      	ldr	r3, [pc, #416]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80039d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80039dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4313      	orrs	r3, r2
 80039e4:	d051      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f0:	d035      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f6:	d82e      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039fc:	d031      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a02:	d828      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a08:	d01a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0e:	d822      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d007      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a4a      	ldr	r2, [pc, #296]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a28:	e01c      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fa6e 	bl	8004f14 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a3e:	e011      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a44:	3328      	adds	r3, #40	; 0x28
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fb15 	bl	8005078 <RCCEx_PLL3_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a5c:	e002      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6513      	str	r3, [r2, #80]	; 0x50
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003aa0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	d056      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab4:	d033      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aba:	d82c      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003abc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac0:	d02f      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac6:	d826      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ac8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003acc:	d02b      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad2:	d820      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad8:	d012      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ade:	d81a      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d022      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fa0e 	bl	8004f14 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003afe:	e015      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	3328      	adds	r3, #40	; 0x28
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fab5 	bl	8005078 <RCCEx_PLL3_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b14:	e00a      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b1c:	e006      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	4a02      	ldr	r2, [pc, #8]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6513      	str	r3, [r2, #80]	; 0x50
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b4a:	bf00      	nop
 8003b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d055      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b84:	d033      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8a:	d82c      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b90:	d02f      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b96:	d826      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b9c:	d02b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ba2:	d820      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba8:	d012      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bae:	d81a      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d022      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb8:	d115      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f9a6 	bl	8004f14 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bce:	e015      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd4:	3328      	adds	r3, #40	; 0x28
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fa4d 	bl	8005078 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003be4:	e00a      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bec:	e006      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e004      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c04:	4ba3      	ldr	r3, [pc, #652]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c14:	4a9f      	ldr	r2, [pc, #636]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d037      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4e:	d00e      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c54:	d816      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d018      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a8b      	ldr	r2, [pc, #556]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c6c:	e00f      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	3308      	adds	r3, #8
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 f94c 	bl	8004f14 <RCCEx_PLL2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c82:	e004      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c96:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a7b      	ldr	r2, [pc, #492]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6513      	str	r3, [r2, #80]	; 0x50
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003cca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d039      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d81c      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003cf5 	.word	0x08003cf5
 8003cec:	08003d03 	.word	0x08003d03
 8003cf0:	08003d21 	.word	0x08003d21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4b67      	ldr	r3, [pc, #412]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a66      	ldr	r2, [pc, #408]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d00:	e00f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d06:	3308      	adds	r3, #8
 8003d08:	2102      	movs	r1, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f902 	bl	8004f14 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d16:	e004      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d2a:	4b5a      	ldr	r3, [pc, #360]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2e:	f023 0103 	bic.w	r1, r3, #3
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d38:	4a56      	ldr	r2, [pc, #344]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d3e:	e003      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f000 809f 	beq.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d76:	f7fd fa43 	bl	8001200 <HAL_GetTick>
 8003d7a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d80:	f7fd fa3e 	bl	8001200 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d903      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d98:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ed      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d179      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003db8:	4053      	eors	r3, r2
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d015      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dce:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a30      	ldr	r2, [pc, #192]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dda:	4b2e      	ldr	r3, [pc, #184]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003de6:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfa:	d118      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fa00 	bl	8001200 <HAL_GetTick>
 8003e00:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e04:	e00d      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd f9fb 	bl	8001200 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d903      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0eb      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d129      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e46:	d10e      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e58:	091a      	lsrs	r2, r3, #4
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6113      	str	r3, [r2, #16]
 8003e64:	e005      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e70:	6113      	str	r3, [r2, #16]
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e82:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	e00e      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e94:	58024400 	.word	0x58024400
 8003e98:	58024800 	.word	0x58024800
 8003e9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f002 0301 	and.w	r3, r2, #1
 8003eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ebe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f000 8089 	beq.w	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed0:	2b28      	cmp	r3, #40	; 0x28
 8003ed2:	d86b      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003fb5 	.word	0x08003fb5
 8003ee0:	08003fad 	.word	0x08003fad
 8003ee4:	08003fad 	.word	0x08003fad
 8003ee8:	08003fad 	.word	0x08003fad
 8003eec:	08003fad 	.word	0x08003fad
 8003ef0:	08003fad 	.word	0x08003fad
 8003ef4:	08003fad 	.word	0x08003fad
 8003ef8:	08003fad 	.word	0x08003fad
 8003efc:	08003f81 	.word	0x08003f81
 8003f00:	08003fad 	.word	0x08003fad
 8003f04:	08003fad 	.word	0x08003fad
 8003f08:	08003fad 	.word	0x08003fad
 8003f0c:	08003fad 	.word	0x08003fad
 8003f10:	08003fad 	.word	0x08003fad
 8003f14:	08003fad 	.word	0x08003fad
 8003f18:	08003fad 	.word	0x08003fad
 8003f1c:	08003f97 	.word	0x08003f97
 8003f20:	08003fad 	.word	0x08003fad
 8003f24:	08003fad 	.word	0x08003fad
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	08003fad 	.word	0x08003fad
 8003f30:	08003fad 	.word	0x08003fad
 8003f34:	08003fad 	.word	0x08003fad
 8003f38:	08003fad 	.word	0x08003fad
 8003f3c:	08003fb5 	.word	0x08003fb5
 8003f40:	08003fad 	.word	0x08003fad
 8003f44:	08003fad 	.word	0x08003fad
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08003fad 	.word	0x08003fad
 8003f50:	08003fad 	.word	0x08003fad
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	08003fb5 	.word	0x08003fb5
 8003f60:	08003fad 	.word	0x08003fad
 8003f64:	08003fad 	.word	0x08003fad
 8003f68:	08003fad 	.word	0x08003fad
 8003f6c:	08003fad 	.word	0x08003fad
 8003f70:	08003fad 	.word	0x08003fad
 8003f74:	08003fad 	.word	0x08003fad
 8003f78:	08003fad 	.word	0x08003fad
 8003f7c:	08003fb5 	.word	0x08003fb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f84:	3308      	adds	r3, #8
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 ffc3 	bl	8004f14 <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f94:	e00f      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f9a:	3328      	adds	r3, #40	; 0x28
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 f86a 	bl	8005078 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fbe:	4bbf      	ldr	r3, [pc, #764]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	4abb      	ldr	r2, [pc, #748]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6553      	str	r3, [r2, #84]	; 0x54
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f002 0302 	and.w	r3, r2, #2
 8003fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ff2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	d041      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004002:	2b05      	cmp	r3, #5
 8004004:	d824      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004059 	.word	0x08004059
 8004010:	08004025 	.word	0x08004025
 8004014:	0800403b 	.word	0x0800403b
 8004018:	08004059 	.word	0x08004059
 800401c:	08004059 	.word	0x08004059
 8004020:	08004059 	.word	0x08004059
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004028:	3308      	adds	r3, #8
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 ff71 	bl	8004f14 <RCCEx_PLL2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004038:	e00f      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403e:	3328      	adds	r3, #40	; 0x28
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f001 f818 	bl	8005078 <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800404e:	e004      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004062:	4b96      	ldr	r3, [pc, #600]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f023 0107 	bic.w	r1, r3, #7
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004070:	4a92      	ldr	r2, [pc, #584]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004072:	430b      	orrs	r3, r1
 8004074:	6553      	str	r3, [r2, #84]	; 0x54
 8004076:	e003      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f002 0304 	and.w	r3, r2, #4
 800408c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004096:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800409a:	460b      	mov	r3, r1
 800409c:	4313      	orrs	r3, r2
 800409e:	d044      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	2b05      	cmp	r3, #5
 80040aa:	d825      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	08004101 	.word	0x08004101
 80040b8:	080040cd 	.word	0x080040cd
 80040bc:	080040e3 	.word	0x080040e3
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004101 	.word	0x08004101
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d0:	3308      	adds	r3, #8
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 ff1d 	bl	8004f14 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	3328      	adds	r3, #40	; 0x28
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ffc4 	bl	8005078 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410a:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	f023 0107 	bic.w	r1, r3, #7
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411a:	4a68      	ldr	r2, [pc, #416]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800411c:	430b      	orrs	r3, r1
 800411e:	6593      	str	r3, [r2, #88]	; 0x58
 8004120:	e003      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f002 0320 	and.w	r3, r2, #32
 8004136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800413a:	2300      	movs	r3, #0
 800413c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004144:	460b      	mov	r3, r1
 8004146:	4313      	orrs	r3, r2
 8004148:	d055      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004156:	d033      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415c:	d82c      	bhi.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d02f      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d826      	bhi.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800416a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800416e:	d02b      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004174:	d820      	bhi.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417a:	d012      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800417c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004180:	d81a      	bhi.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d022      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418a:	d115      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004190:	3308      	adds	r3, #8
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f000 febd 	bl	8004f14 <RCCEx_PLL2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041a0:	e015      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a6:	3328      	adds	r3, #40	; 0x28
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ff64 	bl	8005078 <RCCEx_PLL3_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041b6:	e00a      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041be:	e006      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041c0:	bf00      	nop
 80041c2:	e004      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041c4:	bf00      	nop
 80041c6:	e002      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041c8:	bf00      	nop
 80041ca:	e000      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	4a35      	ldr	r2, [pc, #212]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6553      	str	r3, [r2, #84]	; 0x54
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800420c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d058      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004222:	d033      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004224:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004228:	d82c      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	d02f      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d826      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800423a:	d02b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800423c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004240:	d820      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d012      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800424c:	d81a      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d022      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d115      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425c:	3308      	adds	r3, #8
 800425e:	2100      	movs	r1, #0
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fe57 	bl	8004f14 <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800426c:	e015      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004272:	3328      	adds	r3, #40	; 0x28
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fefe 	bl	8005078 <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004282:	e00a      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800428a:	e006      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800428c:	bf00      	nop
 800428e:	e004      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b2:	4a02      	ldr	r2, [pc, #8]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6593      	str	r3, [r2, #88]	; 0x58
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042ba:	bf00      	nop
 80042bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80042d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d055      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042f4:	d033      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042fa:	d82c      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d02f      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004306:	d826      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004308:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800430c:	d02b      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800430e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004312:	d820      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004318:	d012      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800431a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431e:	d81a      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d022      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004328:	d115      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	3308      	adds	r3, #8
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fdee 	bl	8004f14 <RCCEx_PLL2_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800433e:	e015      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004344:	3328      	adds	r3, #40	; 0x28
 8004346:	2102      	movs	r1, #2
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe95 	bl	8005078 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800436a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004374:	4ba1      	ldr	r3, [pc, #644]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004384:	4a9d      	ldr	r2, [pc, #628]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004386:	430b      	orrs	r3, r1
 8004388:	6593      	str	r3, [r2, #88]	; 0x58
 800438a:	e003      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f002 0308 	and.w	r3, r2, #8
 80043a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043ae:	460b      	mov	r3, r1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d01e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c6:	3328      	adds	r3, #40	; 0x28
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fe54 	bl	8005078 <RCCEx_PLL3_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043dc:	4b87      	ldr	r3, [pc, #540]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	4a83      	ldr	r2, [pc, #524]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ee:	430b      	orrs	r3, r1
 80043f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f002 0310 	and.w	r3, r2, #16
 80043fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004408:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d01e      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441e:	d10c      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	3328      	adds	r3, #40	; 0x28
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fe25 	bl	8005078 <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800443a:	4b70      	ldr	r3, [pc, #448]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444a:	4a6c      	ldr	r2, [pc, #432]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800444c:	430b      	orrs	r3, r1
 800444e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800445c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004460:	2300      	movs	r3, #0
 8004462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004466:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800446a:	460b      	mov	r3, r1
 800446c:	4313      	orrs	r3, r2
 800446e:	d03e      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447c:	d022      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800447e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004482:	d81b      	bhi.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448c:	d00b      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800448e:	e015      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004494:	3308      	adds	r3, #8
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fd3b 	bl	8004f14 <RCCEx_PLL2_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044a4:	e00f      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	3328      	adds	r3, #40	; 0x28
 80044ac:	2102      	movs	r1, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fde2 	bl	8005078 <RCCEx_PLL3_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ba:	e004      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044c2:	e000      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ce:	4b4b      	ldr	r3, [pc, #300]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044de:	4a47      	ldr	r2, [pc, #284]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6593      	str	r3, [r2, #88]	; 0x58
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80044fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fc:	2300      	movs	r3, #0
 80044fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004500:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d03b      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004516:	d01f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004518:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800451c:	d818      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800451e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004522:	d003      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004528:	d007      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800452a:	e011      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	4a32      	ldr	r2, [pc, #200]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004538:	e00f      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	3328      	adds	r3, #40	; 0x28
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fd98 	bl	8005078 <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004562:	4b26      	ldr	r3, [pc, #152]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6553      	str	r3, [r2, #84]	; 0x54
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800458e:	673b      	str	r3, [r7, #112]	; 0x70
 8004590:	2300      	movs	r3, #0
 8004592:	677b      	str	r3, [r7, #116]	; 0x74
 8004594:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004598:	460b      	mov	r3, r1
 800459a:	4313      	orrs	r3, r2
 800459c:	d034      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d007      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045ae:	e011      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b0:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045bc:	e00e      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c2:	3308      	adds	r3, #8
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fca4 	bl	8004f14 <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10d      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	4a02      	ldr	r2, [pc, #8]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004604:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004614:	66bb      	str	r3, [r7, #104]	; 0x68
 8004616:	2300      	movs	r3, #0
 8004618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800461a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d00c      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004628:	3328      	adds	r3, #40	; 0x28
 800462a:	2102      	movs	r1, #2
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fd23 	bl	8005078 <RCCEx_PLL3_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800464a:	663b      	str	r3, [r7, #96]	; 0x60
 800464c:	2300      	movs	r3, #0
 800464e:	667b      	str	r3, [r7, #100]	; 0x64
 8004650:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d038      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d018      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d811      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800466e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004672:	d014      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d80b      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d106      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004684:	4bc3      	ldr	r3, [pc, #780]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	4ac2      	ldr	r2, [pc, #776]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004690:	e008      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004698:	e004      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80046a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046ac:	4bb9      	ldr	r3, [pc, #740]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046bc:	4ab5      	ldr	r2, [pc, #724]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046be:	430b      	orrs	r3, r1
 80046c0:	6553      	str	r3, [r2, #84]	; 0x54
 80046c2:	e003      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80046d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80046da:	2300      	movs	r3, #0
 80046dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046e8:	4baa      	ldr	r3, [pc, #680]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f6:	4aa7      	ldr	r2, [pc, #668]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
 800470a:	2300      	movs	r3, #0
 800470c:	657b      	str	r3, [r7, #84]	; 0x54
 800470e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004718:	4b9e      	ldr	r3, [pc, #632]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004724:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004728:	4a9a      	ldr	r2, [pc, #616]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472a:	430b      	orrs	r3, r1
 800472c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800473a:	64bb      	str	r3, [r7, #72]	; 0x48
 800473c:	2300      	movs	r3, #0
 800473e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004740:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004744:	460b      	mov	r3, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800474a:	4b92      	ldr	r3, [pc, #584]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004758:	4a8e      	ldr	r2, [pc, #568]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475a:	430b      	orrs	r3, r1
 800475c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
 800476c:	2300      	movs	r3, #0
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
 8004770:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800477a:	4b86      	ldr	r3, [pc, #536]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	4a85      	ldr	r2, [pc, #532]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004784:	6113      	str	r3, [r2, #16]
 8004786:	4b83      	ldr	r3, [pc, #524]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004792:	4a80      	ldr	r2, [pc, #512]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a6:	2300      	movs	r3, #0
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047b4:	4b77      	ldr	r3, [pc, #476]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	4a74      	ldr	r2, [pc, #464]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c4:	430b      	orrs	r3, r1
 80047c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
 80047d6:	2300      	movs	r3, #0
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
 80047da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047e4:	4b6b      	ldr	r3, [pc, #428]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f4:	4a67      	ldr	r2, [pc, #412]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f6:	430b      	orrs	r3, r1
 80047f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	2100      	movs	r1, #0
 8004804:	62b9      	str	r1, [r7, #40]	; 0x28
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d011      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481a:	3308      	adds	r3, #8
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fb78 	bl	8004f14 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800482a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	2100      	movs	r1, #0
 8004844:	6239      	str	r1, [r7, #32]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
 800484c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d011      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485a:	3308      	adds	r3, #8
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fb58 	bl	8004f14 <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004876:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	2100      	movs	r1, #0
 8004884:	61b9      	str	r1, [r7, #24]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d011      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489a:	3308      	adds	r3, #8
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fb38 	bl	8004f14 <RCCEx_PLL2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	2100      	movs	r1, #0
 80048c4:	6139      	str	r1, [r7, #16]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d011      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	3328      	adds	r3, #40	; 0x28
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fbca 	bl	8005078 <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	2100      	movs	r1, #0
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d011      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	3328      	adds	r3, #40	; 0x28
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fbaa 	bl	8005078 <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800492a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	2100      	movs	r1, #0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495a:	3328      	adds	r3, #40	; 0x28
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fb8a 	bl	8005078 <RCCEx_PLL3_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800497a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
}
 8004988:	4618      	mov	r0, r3
 800498a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800498e:	46bd      	mov	sp, r7
 8004990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004994:	58024400 	.word	0x58024400

08004998 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800499c:	f7fe fd96 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4904      	ldr	r1, [pc, #16]	; (80049c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	58024400 	.word	0x58024400
 80049c0:	08006a0c 	.word	0x08006a0c

080049c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049cc:	4ba1      	ldr	r3, [pc, #644]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049d6:	4b9f      	ldr	r3, [pc, #636]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	0b1b      	lsrs	r3, r3, #12
 80049dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049e2:	4b9c      	ldr	r3, [pc, #624]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049ee:	4b99      	ldr	r3, [pc, #612]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8111 	beq.w	8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f000 8083 	beq.w	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	f200 80a1 	bhi.w	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d056      	beq.n	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a2e:	e099      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a30:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02d      	beq.n	8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a3c:	4b85      	ldr	r3, [pc, #532]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	4a84      	ldr	r2, [pc, #528]	; (8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b7b      	ldr	r3, [pc, #492]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a96:	e087      	b.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004abe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ada:	e065      	b.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1e:	e043      	b.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b32:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b62:	e021      	b.n	8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	0a5b      	lsrs	r3, r3, #9
 8004bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bce:	ee17 2a90 	vmov	r2, s15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfc:	ee17 2a90 	vmov	r2, s15
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2a:	ee17 2a90 	vmov	r2, s15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c32:	e008      	b.n	8004c46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
}
 8004c46:	bf00      	nop
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	58024400 	.word	0x58024400
 8004c58:	03d09000 	.word	0x03d09000
 8004c5c:	46000000 	.word	0x46000000
 8004c60:	4c742400 	.word	0x4c742400
 8004c64:	4a742400 	.word	0x4a742400
 8004c68:	4af42400 	.word	0x4af42400

08004c6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c74:	4ba1      	ldr	r3, [pc, #644]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c7e:	4b9f      	ldr	r3, [pc, #636]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	0d1b      	lsrs	r3, r3, #20
 8004c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c8a:	4b9c      	ldr	r3, [pc, #624]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c96:	4b99      	ldr	r3, [pc, #612]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	08db      	lsrs	r3, r3, #3
 8004c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8111 	beq.w	8004edc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	f000 8083 	beq.w	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	f200 80a1 	bhi.w	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d056      	beq.n	8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cd6:	e099      	b.n	8004e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cd8:	4b88      	ldr	r3, [pc, #544]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d02d      	beq.n	8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ce4:	4b85      	ldr	r3, [pc, #532]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	08db      	lsrs	r3, r3, #3
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	4a84      	ldr	r2, [pc, #528]	; (8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b7b      	ldr	r3, [pc, #492]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d3e:	e087      	b.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d82:	e065      	b.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc6:	e043      	b.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dda:	4b48      	ldr	r3, [pc, #288]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e0a:	e021      	b.n	8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e50:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	0a5b      	lsrs	r3, r3, #9
 8004e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e76:	ee17 2a90 	vmov	r2, s15
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	0c1b      	lsrs	r3, r3, #16
 8004e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea4:	ee17 2a90 	vmov	r2, s15
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	0e1b      	lsrs	r3, r3, #24
 8004eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed2:	ee17 2a90 	vmov	r2, s15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004eda:	e008      	b.n	8004eee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
}
 8004eee:	bf00      	nop
 8004ef0:	3724      	adds	r7, #36	; 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	58024400 	.word	0x58024400
 8004f00:	03d09000 	.word	0x03d09000
 8004f04:	46000000 	.word	0x46000000
 8004f08:	4c742400 	.word	0x4c742400
 8004f0c:	4a742400 	.word	0x4a742400
 8004f10:	4af42400 	.word	0x4af42400

08004f14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f22:	4b53      	ldr	r3, [pc, #332]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d101      	bne.n	8004f32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e099      	b.n	8005066 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f32:	4b4f      	ldr	r3, [pc, #316]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a4e      	ldr	r2, [pc, #312]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3e:	f7fc f95f 	bl	8001200 <HAL_GetTick>
 8004f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f44:	e008      	b.n	8004f58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f46:	f7fc f95b 	bl	8001200 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e086      	b.n	8005066 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f58:	4b45      	ldr	r3, [pc, #276]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f0      	bne.n	8004f46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f64:	4b42      	ldr	r3, [pc, #264]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	031b      	lsls	r3, r3, #12
 8004f72:	493f      	ldr	r1, [pc, #252]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	628b      	str	r3, [r1, #40]	; 0x28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	025b      	lsls	r3, r3, #9
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	061b      	lsls	r3, r3, #24
 8004fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa8:	4931      	ldr	r1, [pc, #196]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fae:	4b30      	ldr	r3, [pc, #192]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	492d      	ldr	r1, [pc, #180]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f023 0220 	bic.w	r2, r3, #32
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	4928      	ldr	r1, [pc, #160]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a26      	ldr	r2, [pc, #152]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fd8:	f023 0310 	bic.w	r3, r3, #16
 8004fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fde:	4b24      	ldr	r3, [pc, #144]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <RCCEx_PLL2_Config+0x160>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	69d2      	ldr	r2, [r2, #28]
 8004fea:	00d2      	lsls	r2, r2, #3
 8004fec:	4920      	ldr	r1, [pc, #128]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	4a1e      	ldr	r2, [pc, #120]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a19      	ldr	r2, [pc, #100]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 800500a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800500e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005010:	e00f      	b.n	8005032 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d106      	bne.n	8005026 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005022:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005024:	e005      	b.n	8005032 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	4a11      	ldr	r2, [pc, #68]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 800502c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005030:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 8005038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc f8df 	bl	8001200 <HAL_GetTick>
 8005042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005044:	e008      	b.n	8005058 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005046:	f7fc f8db 	bl	8001200 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e006      	b.n	8005066 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <RCCEx_PLL2_Config+0x15c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005064:	7bfb      	ldrb	r3, [r7, #15]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	58024400 	.word	0x58024400
 8005074:	ffff0007 	.word	0xffff0007

08005078 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005086:	4b53      	ldr	r3, [pc, #332]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b03      	cmp	r3, #3
 8005090:	d101      	bne.n	8005096 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e099      	b.n	80051ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005096:	4b4f      	ldr	r3, [pc, #316]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a4e      	ldr	r2, [pc, #312]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800509c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fc f8ad 	bl	8001200 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050a8:	e008      	b.n	80050bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050aa:	f7fc f8a9 	bl	8001200 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e086      	b.n	80051ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050bc:	4b45      	ldr	r3, [pc, #276]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050c8:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	051b      	lsls	r3, r3, #20
 80050d6:	493f      	ldr	r1, [pc, #252]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	628b      	str	r3, [r1, #40]	; 0x28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	025b      	lsls	r3, r3, #9
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	3b01      	subs	r3, #1
 8005106:	061b      	lsls	r3, r3, #24
 8005108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800510c:	4931      	ldr	r1, [pc, #196]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005112:	4b30      	ldr	r3, [pc, #192]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	492d      	ldr	r1, [pc, #180]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005124:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4928      	ldr	r1, [pc, #160]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005136:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800513c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <RCCEx_PLL3_Config+0x160>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	69d2      	ldr	r2, [r2, #28]
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	4920      	ldr	r1, [pc, #128]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005156:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800516e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005174:	e00f      	b.n	8005196 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800517c:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005188:	e005      	b.n	8005196 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 800519c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fc f82d 	bl	8001200 <HAL_GetTick>
 80051a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051a8:	e008      	b.n	80051bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051aa:	f7fc f829 	bl	8001200 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e006      	b.n	80051ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <RCCEx_PLL3_Config+0x15c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
 80051d8:	ffff0007 	.word	0xffff0007

080051dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e042      	b.n	8005274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fb fdb5 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2224      	movs	r2, #36	; 0x24
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f82c 	bl	800527c <UART_SetConfig>
 8005224:	4603      	mov	r3, r0
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e022      	b.n	8005274 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fd88 	bl	8005d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800524a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800525a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fe0f 	bl	8005e90 <UART_CheckIdleState>
 8005272:	4603      	mov	r3, r0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b092      	sub	sp, #72	; 0x48
 8005282:	af00      	add	r7, sp, #0
 8005284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4bbe      	ldr	r3, [pc, #760]	; (80055a4 <UART_SetConfig+0x328>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4ab3      	ldr	r2, [pc, #716]	; (80055a8 <UART_SetConfig+0x32c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e4:	4313      	orrs	r3, r2
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	4baf      	ldr	r3, [pc, #700]	; (80055ac <UART_SetConfig+0x330>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	f023 010f 	bic.w	r1, r3, #15
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4aa6      	ldr	r2, [pc, #664]	; (80055b0 <UART_SetConfig+0x334>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d177      	bne.n	800540c <UART_SetConfig+0x190>
 800531c:	4ba5      	ldr	r3, [pc, #660]	; (80055b4 <UART_SetConfig+0x338>)
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005324:	2b28      	cmp	r3, #40	; 0x28
 8005326:	d86d      	bhi.n	8005404 <UART_SetConfig+0x188>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0xb4>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	080053d5 	.word	0x080053d5
 8005334:	08005405 	.word	0x08005405
 8005338:	08005405 	.word	0x08005405
 800533c:	08005405 	.word	0x08005405
 8005340:	08005405 	.word	0x08005405
 8005344:	08005405 	.word	0x08005405
 8005348:	08005405 	.word	0x08005405
 800534c:	08005405 	.word	0x08005405
 8005350:	080053dd 	.word	0x080053dd
 8005354:	08005405 	.word	0x08005405
 8005358:	08005405 	.word	0x08005405
 800535c:	08005405 	.word	0x08005405
 8005360:	08005405 	.word	0x08005405
 8005364:	08005405 	.word	0x08005405
 8005368:	08005405 	.word	0x08005405
 800536c:	08005405 	.word	0x08005405
 8005370:	080053e5 	.word	0x080053e5
 8005374:	08005405 	.word	0x08005405
 8005378:	08005405 	.word	0x08005405
 800537c:	08005405 	.word	0x08005405
 8005380:	08005405 	.word	0x08005405
 8005384:	08005405 	.word	0x08005405
 8005388:	08005405 	.word	0x08005405
 800538c:	08005405 	.word	0x08005405
 8005390:	080053ed 	.word	0x080053ed
 8005394:	08005405 	.word	0x08005405
 8005398:	08005405 	.word	0x08005405
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005405 	.word	0x08005405
 80053a8:	08005405 	.word	0x08005405
 80053ac:	08005405 	.word	0x08005405
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005405 	.word	0x08005405
 80053bc:	08005405 	.word	0x08005405
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	08005405 	.word	0x08005405
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e222      	b.n	8005822 <UART_SetConfig+0x5a6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e21e      	b.n	8005822 <UART_SetConfig+0x5a6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e21a      	b.n	8005822 <UART_SetConfig+0x5a6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e216      	b.n	8005822 <UART_SetConfig+0x5a6>
 80053f4:	2320      	movs	r3, #32
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e212      	b.n	8005822 <UART_SetConfig+0x5a6>
 80053fc:	2340      	movs	r3, #64	; 0x40
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e20e      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e20a      	b.n	8005822 <UART_SetConfig+0x5a6>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a69      	ldr	r2, [pc, #420]	; (80055b8 <UART_SetConfig+0x33c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d130      	bne.n	8005478 <UART_SetConfig+0x1fc>
 8005416:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <UART_SetConfig+0x338>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b05      	cmp	r3, #5
 8005420:	d826      	bhi.n	8005470 <UART_SetConfig+0x1f4>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0x1ac>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005441 	.word	0x08005441
 800542c:	08005449 	.word	0x08005449
 8005430:	08005451 	.word	0x08005451
 8005434:	08005459 	.word	0x08005459
 8005438:	08005461 	.word	0x08005461
 800543c:	08005469 	.word	0x08005469
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e1ec      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e1e8      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e1e4      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e1e0      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005460:	2320      	movs	r3, #32
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e1dc      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e1d8      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e1d4      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a4f      	ldr	r2, [pc, #316]	; (80055bc <UART_SetConfig+0x340>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d130      	bne.n	80054e4 <UART_SetConfig+0x268>
 8005482:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <UART_SetConfig+0x338>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b05      	cmp	r3, #5
 800548c:	d826      	bhi.n	80054dc <UART_SetConfig+0x260>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0x218>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054bd 	.word	0x080054bd
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054d5 	.word	0x080054d5
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e1b6      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e1b2      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e1ae      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e1aa      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054cc:	2320      	movs	r3, #32
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e1a6      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054d4:	2340      	movs	r3, #64	; 0x40
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e1a2      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e2:	e19e      	b.n	8005822 <UART_SetConfig+0x5a6>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <UART_SetConfig+0x344>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d130      	bne.n	8005550 <UART_SetConfig+0x2d4>
 80054ee:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <UART_SetConfig+0x338>)
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d826      	bhi.n	8005548 <UART_SetConfig+0x2cc>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <UART_SetConfig+0x284>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005519 	.word	0x08005519
 8005504:	08005521 	.word	0x08005521
 8005508:	08005529 	.word	0x08005529
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e180      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e17c      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e178      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005536:	e174      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005538:	2320      	movs	r3, #32
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553e:	e170      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005540:	2340      	movs	r3, #64	; 0x40
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005546:	e16c      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554e:	e168      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <UART_SetConfig+0x348>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d142      	bne.n	80055e0 <UART_SetConfig+0x364>
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <UART_SetConfig+0x338>)
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b05      	cmp	r3, #5
 8005564:	d838      	bhi.n	80055d8 <UART_SetConfig+0x35c>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <UART_SetConfig+0x2f0>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	08005585 	.word	0x08005585
 8005570:	0800558d 	.word	0x0800558d
 8005574:	08005595 	.word	0x08005595
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055c9 	.word	0x080055c9
 8005580:	080055d1 	.word	0x080055d1
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e14a      	b.n	8005822 <UART_SetConfig+0x5a6>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e146      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e142      	b.n	8005822 <UART_SetConfig+0x5a6>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e13e      	b.n	8005822 <UART_SetConfig+0x5a6>
 80055a4:	cfff69f3 	.word	0xcfff69f3
 80055a8:	58000c00 	.word	0x58000c00
 80055ac:	11fff4ff 	.word	0x11fff4ff
 80055b0:	40011000 	.word	0x40011000
 80055b4:	58024400 	.word	0x58024400
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	40005000 	.word	0x40005000
 80055c8:	2320      	movs	r3, #32
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e128      	b.n	8005822 <UART_SetConfig+0x5a6>
 80055d0:	2340      	movs	r3, #64	; 0x40
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e124      	b.n	8005822 <UART_SetConfig+0x5a6>
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e120      	b.n	8005822 <UART_SetConfig+0x5a6>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4acb      	ldr	r2, [pc, #812]	; (8005914 <UART_SetConfig+0x698>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d176      	bne.n	80056d8 <UART_SetConfig+0x45c>
 80055ea:	4bcb      	ldr	r3, [pc, #812]	; (8005918 <UART_SetConfig+0x69c>)
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055f2:	2b28      	cmp	r3, #40	; 0x28
 80055f4:	d86c      	bhi.n	80056d0 <UART_SetConfig+0x454>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x380>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	080056a1 	.word	0x080056a1
 8005600:	080056d1 	.word	0x080056d1
 8005604:	080056d1 	.word	0x080056d1
 8005608:	080056d1 	.word	0x080056d1
 800560c:	080056d1 	.word	0x080056d1
 8005610:	080056d1 	.word	0x080056d1
 8005614:	080056d1 	.word	0x080056d1
 8005618:	080056d1 	.word	0x080056d1
 800561c:	080056a9 	.word	0x080056a9
 8005620:	080056d1 	.word	0x080056d1
 8005624:	080056d1 	.word	0x080056d1
 8005628:	080056d1 	.word	0x080056d1
 800562c:	080056d1 	.word	0x080056d1
 8005630:	080056d1 	.word	0x080056d1
 8005634:	080056d1 	.word	0x080056d1
 8005638:	080056d1 	.word	0x080056d1
 800563c:	080056b1 	.word	0x080056b1
 8005640:	080056d1 	.word	0x080056d1
 8005644:	080056d1 	.word	0x080056d1
 8005648:	080056d1 	.word	0x080056d1
 800564c:	080056d1 	.word	0x080056d1
 8005650:	080056d1 	.word	0x080056d1
 8005654:	080056d1 	.word	0x080056d1
 8005658:	080056d1 	.word	0x080056d1
 800565c:	080056b9 	.word	0x080056b9
 8005660:	080056d1 	.word	0x080056d1
 8005664:	080056d1 	.word	0x080056d1
 8005668:	080056d1 	.word	0x080056d1
 800566c:	080056d1 	.word	0x080056d1
 8005670:	080056d1 	.word	0x080056d1
 8005674:	080056d1 	.word	0x080056d1
 8005678:	080056d1 	.word	0x080056d1
 800567c:	080056c1 	.word	0x080056c1
 8005680:	080056d1 	.word	0x080056d1
 8005684:	080056d1 	.word	0x080056d1
 8005688:	080056d1 	.word	0x080056d1
 800568c:	080056d1 	.word	0x080056d1
 8005690:	080056d1 	.word	0x080056d1
 8005694:	080056d1 	.word	0x080056d1
 8005698:	080056d1 	.word	0x080056d1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e0bc      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e0b8      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e0b4      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e0b0      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056c0:	2320      	movs	r3, #32
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e0ac      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e0a8      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e0a4      	b.n	8005822 <UART_SetConfig+0x5a6>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a8f      	ldr	r2, [pc, #572]	; (800591c <UART_SetConfig+0x6a0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d130      	bne.n	8005744 <UART_SetConfig+0x4c8>
 80056e2:	4b8d      	ldr	r3, [pc, #564]	; (8005918 <UART_SetConfig+0x69c>)
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d826      	bhi.n	800573c <UART_SetConfig+0x4c0>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x478>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	0800570d 	.word	0x0800570d
 80056f8:	08005715 	.word	0x08005715
 80056fc:	0800571d 	.word	0x0800571d
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e086      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005714:	2304      	movs	r3, #4
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e082      	b.n	8005822 <UART_SetConfig+0x5a6>
 800571c:	2308      	movs	r3, #8
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e07e      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005724:	2310      	movs	r3, #16
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e07a      	b.n	8005822 <UART_SetConfig+0x5a6>
 800572c:	2320      	movs	r3, #32
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e076      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005734:	2340      	movs	r3, #64	; 0x40
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e072      	b.n	8005822 <UART_SetConfig+0x5a6>
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e06e      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a75      	ldr	r2, [pc, #468]	; (8005920 <UART_SetConfig+0x6a4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d130      	bne.n	80057b0 <UART_SetConfig+0x534>
 800574e:	4b72      	ldr	r3, [pc, #456]	; (8005918 <UART_SetConfig+0x69c>)
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b05      	cmp	r3, #5
 8005758:	d826      	bhi.n	80057a8 <UART_SetConfig+0x52c>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x4e4>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005779 	.word	0x08005779
 8005764:	08005781 	.word	0x08005781
 8005768:	08005789 	.word	0x08005789
 800576c:	08005791 	.word	0x08005791
 8005770:	08005799 	.word	0x08005799
 8005774:	080057a1 	.word	0x080057a1
 8005778:	2300      	movs	r3, #0
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e050      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005780:	2304      	movs	r3, #4
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e04c      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005788:	2308      	movs	r3, #8
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e048      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005790:	2310      	movs	r3, #16
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e044      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005798:	2320      	movs	r3, #32
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e040      	b.n	8005822 <UART_SetConfig+0x5a6>
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e03c      	b.n	8005822 <UART_SetConfig+0x5a6>
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e038      	b.n	8005822 <UART_SetConfig+0x5a6>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5b      	ldr	r2, [pc, #364]	; (8005924 <UART_SetConfig+0x6a8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d130      	bne.n	800581c <UART_SetConfig+0x5a0>
 80057ba:	4b57      	ldr	r3, [pc, #348]	; (8005918 <UART_SetConfig+0x69c>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	2b05      	cmp	r3, #5
 80057c4:	d826      	bhi.n	8005814 <UART_SetConfig+0x598>
 80057c6:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x550>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	080057e5 	.word	0x080057e5
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	080057f5 	.word	0x080057f5
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005805 	.word	0x08005805
 80057e0:	0800580d 	.word	0x0800580d
 80057e4:	2302      	movs	r3, #2
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e01a      	b.n	8005822 <UART_SetConfig+0x5a6>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e016      	b.n	8005822 <UART_SetConfig+0x5a6>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e012      	b.n	8005822 <UART_SetConfig+0x5a6>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e00e      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005804:	2320      	movs	r3, #32
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e00a      	b.n	8005822 <UART_SetConfig+0x5a6>
 800580c:	2340      	movs	r3, #64	; 0x40
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e006      	b.n	8005822 <UART_SetConfig+0x5a6>
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800581a:	e002      	b.n	8005822 <UART_SetConfig+0x5a6>
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a3f      	ldr	r2, [pc, #252]	; (8005924 <UART_SetConfig+0x6a8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	f040 80f8 	bne.w	8005a1e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800582e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005832:	2b20      	cmp	r3, #32
 8005834:	dc46      	bgt.n	80058c4 <UART_SetConfig+0x648>
 8005836:	2b02      	cmp	r3, #2
 8005838:	f2c0 8082 	blt.w	8005940 <UART_SetConfig+0x6c4>
 800583c:	3b02      	subs	r3, #2
 800583e:	2b1e      	cmp	r3, #30
 8005840:	d87e      	bhi.n	8005940 <UART_SetConfig+0x6c4>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x5cc>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	080058cb 	.word	0x080058cb
 800584c:	08005941 	.word	0x08005941
 8005850:	080058d3 	.word	0x080058d3
 8005854:	08005941 	.word	0x08005941
 8005858:	08005941 	.word	0x08005941
 800585c:	08005941 	.word	0x08005941
 8005860:	080058e3 	.word	0x080058e3
 8005864:	08005941 	.word	0x08005941
 8005868:	08005941 	.word	0x08005941
 800586c:	08005941 	.word	0x08005941
 8005870:	08005941 	.word	0x08005941
 8005874:	08005941 	.word	0x08005941
 8005878:	08005941 	.word	0x08005941
 800587c:	08005941 	.word	0x08005941
 8005880:	080058f3 	.word	0x080058f3
 8005884:	08005941 	.word	0x08005941
 8005888:	08005941 	.word	0x08005941
 800588c:	08005941 	.word	0x08005941
 8005890:	08005941 	.word	0x08005941
 8005894:	08005941 	.word	0x08005941
 8005898:	08005941 	.word	0x08005941
 800589c:	08005941 	.word	0x08005941
 80058a0:	08005941 	.word	0x08005941
 80058a4:	08005941 	.word	0x08005941
 80058a8:	08005941 	.word	0x08005941
 80058ac:	08005941 	.word	0x08005941
 80058b0:	08005941 	.word	0x08005941
 80058b4:	08005941 	.word	0x08005941
 80058b8:	08005941 	.word	0x08005941
 80058bc:	08005941 	.word	0x08005941
 80058c0:	08005933 	.word	0x08005933
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d037      	beq.n	8005938 <UART_SetConfig+0x6bc>
 80058c8:	e03a      	b.n	8005940 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058ca:	f7ff f865 	bl	8004998 <HAL_RCCEx_GetD3PCLK1Freq>
 80058ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058d0:	e03c      	b.n	800594c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff f874 	bl	80049c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e0:	e034      	b.n	800594c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e2:	f107 0318 	add.w	r3, r7, #24
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff f9c0 	bl	8004c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f0:	e02c      	b.n	800594c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <UART_SetConfig+0x69c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <UART_SetConfig+0x69c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	4a07      	ldr	r2, [pc, #28]	; (8005928 <UART_SetConfig+0x6ac>)
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005910:	e01c      	b.n	800594c <UART_SetConfig+0x6d0>
 8005912:	bf00      	nop
 8005914:	40011400 	.word	0x40011400
 8005918:	58024400 	.word	0x58024400
 800591c:	40007800 	.word	0x40007800
 8005920:	40007c00 	.word	0x40007c00
 8005924:	58000c00 	.word	0x58000c00
 8005928:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800592c:	4b9d      	ldr	r3, [pc, #628]	; (8005ba4 <UART_SetConfig+0x928>)
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005930:	e00c      	b.n	800594c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005932:	4b9d      	ldr	r3, [pc, #628]	; (8005ba8 <UART_SetConfig+0x92c>)
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005936:	e009      	b.n	800594c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800593e:	e005      	b.n	800594c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800594a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800594c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 81de 	beq.w	8005d10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	4a94      	ldr	r2, [pc, #592]	; (8005bac <UART_SetConfig+0x930>)
 800595a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595e:	461a      	mov	r2, r3
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	fbb3 f3f2 	udiv	r3, r3, r2
 8005966:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005974:	429a      	cmp	r2, r3
 8005976:	d305      	bcc.n	8005984 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800597e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800598a:	e1c1      	b.n	8005d10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	2200      	movs	r2, #0
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	60fa      	str	r2, [r7, #12]
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	4a84      	ldr	r2, [pc, #528]	; (8005bac <UART_SetConfig+0x930>)
 800599a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2200      	movs	r2, #0
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ae:	f7fa fc93 	bl	80002d8 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	020b      	lsls	r3, r1, #8
 80059c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059c8:	0202      	lsls	r2, r0, #8
 80059ca:	6979      	ldr	r1, [r7, #20]
 80059cc:	6849      	ldr	r1, [r1, #4]
 80059ce:	0849      	lsrs	r1, r1, #1
 80059d0:	2000      	movs	r0, #0
 80059d2:	460c      	mov	r4, r1
 80059d4:	4605      	mov	r5, r0
 80059d6:	eb12 0804 	adds.w	r8, r2, r4
 80059da:	eb43 0905 	adc.w	r9, r3, r5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	469a      	mov	sl, r3
 80059e6:	4693      	mov	fp, r2
 80059e8:	4652      	mov	r2, sl
 80059ea:	465b      	mov	r3, fp
 80059ec:	4640      	mov	r0, r8
 80059ee:	4649      	mov	r1, r9
 80059f0:	f7fa fc72 	bl	80002d8 <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4613      	mov	r3, r2
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a02:	d308      	bcc.n	8005a16 <UART_SetConfig+0x79a>
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d204      	bcs.n	8005a16 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	e17c      	b.n	8005d10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a1c:	e178      	b.n	8005d10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a26:	f040 80c5 	bne.w	8005bb4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005a2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	dc48      	bgt.n	8005ac4 <UART_SetConfig+0x848>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db7b      	blt.n	8005b2e <UART_SetConfig+0x8b2>
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d879      	bhi.n	8005b2e <UART_SetConfig+0x8b2>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <UART_SetConfig+0x7c4>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005acb 	.word	0x08005acb
 8005a44:	08005ad3 	.word	0x08005ad3
 8005a48:	08005b2f 	.word	0x08005b2f
 8005a4c:	08005b2f 	.word	0x08005b2f
 8005a50:	08005adb 	.word	0x08005adb
 8005a54:	08005b2f 	.word	0x08005b2f
 8005a58:	08005b2f 	.word	0x08005b2f
 8005a5c:	08005b2f 	.word	0x08005b2f
 8005a60:	08005aeb 	.word	0x08005aeb
 8005a64:	08005b2f 	.word	0x08005b2f
 8005a68:	08005b2f 	.word	0x08005b2f
 8005a6c:	08005b2f 	.word	0x08005b2f
 8005a70:	08005b2f 	.word	0x08005b2f
 8005a74:	08005b2f 	.word	0x08005b2f
 8005a78:	08005b2f 	.word	0x08005b2f
 8005a7c:	08005b2f 	.word	0x08005b2f
 8005a80:	08005afb 	.word	0x08005afb
 8005a84:	08005b2f 	.word	0x08005b2f
 8005a88:	08005b2f 	.word	0x08005b2f
 8005a8c:	08005b2f 	.word	0x08005b2f
 8005a90:	08005b2f 	.word	0x08005b2f
 8005a94:	08005b2f 	.word	0x08005b2f
 8005a98:	08005b2f 	.word	0x08005b2f
 8005a9c:	08005b2f 	.word	0x08005b2f
 8005aa0:	08005b2f 	.word	0x08005b2f
 8005aa4:	08005b2f 	.word	0x08005b2f
 8005aa8:	08005b2f 	.word	0x08005b2f
 8005aac:	08005b2f 	.word	0x08005b2f
 8005ab0:	08005b2f 	.word	0x08005b2f
 8005ab4:	08005b2f 	.word	0x08005b2f
 8005ab8:	08005b2f 	.word	0x08005b2f
 8005abc:	08005b2f 	.word	0x08005b2f
 8005ac0:	08005b21 	.word	0x08005b21
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d02e      	beq.n	8005b26 <UART_SetConfig+0x8aa>
 8005ac8:	e031      	b.n	8005b2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aca:	f7fd fd2f 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 8005ace:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ad0:	e033      	b.n	8005b3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad2:	f7fd fd41 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 8005ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ad8:	e02f      	b.n	8005b3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe ff70 	bl	80049c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ae8:	e027      	b.n	8005b3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aea:	f107 0318 	add.w	r3, r7, #24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff f8bc 	bl	8004c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af8:	e01f      	b.n	8005b3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005afa:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <UART_SetConfig+0x934>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <UART_SetConfig+0x934>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	08db      	lsrs	r3, r3, #3
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <UART_SetConfig+0x928>)
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b18:	e00f      	b.n	8005b3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005b1a:	4b22      	ldr	r3, [pc, #136]	; (8005ba4 <UART_SetConfig+0x928>)
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b1e:	e00c      	b.n	8005b3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b20:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <UART_SetConfig+0x92c>)
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b24:	e009      	b.n	8005b3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b2c:	e005      	b.n	8005b3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005b38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80e7 	beq.w	8005d10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	4a19      	ldr	r2, [pc, #100]	; (8005bac <UART_SetConfig+0x930>)
 8005b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b54:	005a      	lsls	r2, r3, #1
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	441a      	add	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2b0f      	cmp	r3, #15
 8005b6c:	d916      	bls.n	8005b9c <UART_SetConfig+0x920>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d212      	bcs.n	8005b9c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f023 030f 	bic.w	r3, r3, #15
 8005b7e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	e0b9      	b.n	8005d10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ba2:	e0b5      	b.n	8005d10 <UART_SetConfig+0xa94>
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	003d0900 	.word	0x003d0900
 8005bac:	08006a1c 	.word	0x08006a1c
 8005bb0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	dc49      	bgt.n	8005c50 <UART_SetConfig+0x9d4>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	db7c      	blt.n	8005cba <UART_SetConfig+0xa3e>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d87a      	bhi.n	8005cba <UART_SetConfig+0xa3e>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x950>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c57 	.word	0x08005c57
 8005bd0:	08005c5f 	.word	0x08005c5f
 8005bd4:	08005cbb 	.word	0x08005cbb
 8005bd8:	08005cbb 	.word	0x08005cbb
 8005bdc:	08005c67 	.word	0x08005c67
 8005be0:	08005cbb 	.word	0x08005cbb
 8005be4:	08005cbb 	.word	0x08005cbb
 8005be8:	08005cbb 	.word	0x08005cbb
 8005bec:	08005c77 	.word	0x08005c77
 8005bf0:	08005cbb 	.word	0x08005cbb
 8005bf4:	08005cbb 	.word	0x08005cbb
 8005bf8:	08005cbb 	.word	0x08005cbb
 8005bfc:	08005cbb 	.word	0x08005cbb
 8005c00:	08005cbb 	.word	0x08005cbb
 8005c04:	08005cbb 	.word	0x08005cbb
 8005c08:	08005cbb 	.word	0x08005cbb
 8005c0c:	08005c87 	.word	0x08005c87
 8005c10:	08005cbb 	.word	0x08005cbb
 8005c14:	08005cbb 	.word	0x08005cbb
 8005c18:	08005cbb 	.word	0x08005cbb
 8005c1c:	08005cbb 	.word	0x08005cbb
 8005c20:	08005cbb 	.word	0x08005cbb
 8005c24:	08005cbb 	.word	0x08005cbb
 8005c28:	08005cbb 	.word	0x08005cbb
 8005c2c:	08005cbb 	.word	0x08005cbb
 8005c30:	08005cbb 	.word	0x08005cbb
 8005c34:	08005cbb 	.word	0x08005cbb
 8005c38:	08005cbb 	.word	0x08005cbb
 8005c3c:	08005cbb 	.word	0x08005cbb
 8005c40:	08005cbb 	.word	0x08005cbb
 8005c44:	08005cbb 	.word	0x08005cbb
 8005c48:	08005cbb 	.word	0x08005cbb
 8005c4c:	08005cad 	.word	0x08005cad
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d02e      	beq.n	8005cb2 <UART_SetConfig+0xa36>
 8005c54:	e031      	b.n	8005cba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c56:	f7fd fc69 	bl	800352c <HAL_RCC_GetPCLK1Freq>
 8005c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c5c:	e033      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c5e:	f7fd fc7b 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 8005c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c64:	e02f      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe feaa 	bl	80049c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c74:	e027      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c76:	f107 0318 	add.w	r3, r7, #24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fff6 	bl	8004c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c84:	e01f      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c86:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <UART_SetConfig+0xac0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c92:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <UART_SetConfig+0xac0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <UART_SetConfig+0xac4>)
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ca4:	e00f      	b.n	8005cc6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005ca6:	4b26      	ldr	r3, [pc, #152]	; (8005d40 <UART_SetConfig+0xac4>)
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005caa:	e00c      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cac:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <UART_SetConfig+0xac8>)
 8005cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb0:	e009      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cb8:	e005      	b.n	8005cc6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cc4:	bf00      	nop
    }

    if (pclk != 0U)
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d021      	beq.n	8005d10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	4a1d      	ldr	r2, [pc, #116]	; (8005d48 <UART_SetConfig+0xacc>)
 8005cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	441a      	add	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d909      	bls.n	8005d0a <UART_SetConfig+0xa8e>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d205      	bcs.n	8005d0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	e002      	b.n	8005d10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3748      	adds	r7, #72	; 0x48
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	03d09000 	.word	0x03d09000
 8005d44:	003d0900 	.word	0x003d0900
 8005d48:	08006a1c 	.word	0x08006a1c

08005d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d10a      	bne.n	8005e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b098      	sub	sp, #96	; 0x60
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea0:	f7fb f9ae 	bl	8001200 <HAL_GetTick>
 8005ea4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d12f      	bne.n	8005f14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f88e 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d022      	beq.n	8005f14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eec:	647b      	str	r3, [r7, #68]	; 0x44
 8005eee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e6      	bne.n	8005ece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e063      	b.n	8005fdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d149      	bne.n	8005fb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f857 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d03c      	beq.n	8005fb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	623b      	str	r3, [r7, #32]
   return(result);
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e6      	bne.n	8005f3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f8e:	61fa      	str	r2, [r7, #28]
 8005f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e012      	b.n	8005fdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3758      	adds	r7, #88	; 0x58
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff4:	e049      	b.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d045      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffe:	f7fb f8ff 	bl	8001200 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <UART_WaitOnFlagUntilTimeout+0x30>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e048      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d031      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b08      	cmp	r3, #8
 8006032:	d110      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2208      	movs	r2, #8
 800603a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f839 	bl	80060b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2208      	movs	r2, #8
 8006046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e029      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006064:	d111      	bne.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800606e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f81f 	bl	80060b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e00f      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4013      	ands	r3, r2
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	bf0c      	ite	eq
 800609a:	2301      	moveq	r3, #1
 800609c:	2300      	movne	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d0a6      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b095      	sub	sp, #84	; 0x54
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060da:	643b      	str	r3, [r7, #64]	; 0x40
 80060dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e6      	bne.n	80060bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3308      	adds	r3, #8
 80060f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	4b1e      	ldr	r3, [pc, #120]	; (800617c <UART_EndRxTransfer+0xc8>)
 8006102:	4013      	ands	r3, r2
 8006104:	64bb      	str	r3, [r7, #72]	; 0x48
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800610e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006126:	2b01      	cmp	r3, #1
 8006128:	d118      	bne.n	800615c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	60bb      	str	r3, [r7, #8]
   return(result);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 0310 	bic.w	r3, r3, #16
 800613e:	647b      	str	r3, [r7, #68]	; 0x44
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6979      	ldr	r1, [r7, #20]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	613b      	str	r3, [r7, #16]
   return(result);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e6      	bne.n	800612a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006170:	bf00      	nop
 8006172:	3754      	adds	r7, #84	; 0x54
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	effffffe 	.word	0xeffffffe

08006180 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_UARTEx_DisableFifoMode+0x16>
 8006192:	2302      	movs	r3, #2
 8006194:	e027      	b.n	80061e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	; 0x24
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006206:	2302      	movs	r3, #2
 8006208:	e02d      	b.n	8006266 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2224      	movs	r2, #36	; 0x24
 8006216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f850 	bl	80062ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006282:	2302      	movs	r3, #2
 8006284:	e02d      	b.n	80062e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	; 0x24
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f812 	bl	80062ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d108      	bne.n	800630e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800630c:	e031      	b.n	8006372 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800630e:	2310      	movs	r3, #16
 8006310:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006312:	2310      	movs	r3, #16
 8006314:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	0e5b      	lsrs	r3, r3, #25
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	0f5b      	lsrs	r3, r3, #29
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	7b3a      	ldrb	r2, [r7, #12]
 800633a:	4911      	ldr	r1, [pc, #68]	; (8006380 <UARTEx_SetNbDataToProcess+0x94>)
 800633c:	5c8a      	ldrb	r2, [r1, r2]
 800633e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006342:	7b3a      	ldrb	r2, [r7, #12]
 8006344:	490f      	ldr	r1, [pc, #60]	; (8006384 <UARTEx_SetNbDataToProcess+0x98>)
 8006346:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006348:	fb93 f3f2 	sdiv	r3, r3, r2
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	7b7a      	ldrb	r2, [r7, #13]
 8006358:	4909      	ldr	r1, [pc, #36]	; (8006380 <UARTEx_SetNbDataToProcess+0x94>)
 800635a:	5c8a      	ldrb	r2, [r1, r2]
 800635c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006360:	7b7a      	ldrb	r2, [r7, #13]
 8006362:	4908      	ldr	r1, [pc, #32]	; (8006384 <UARTEx_SetNbDataToProcess+0x98>)
 8006364:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006366:	fb93 f3f2 	sdiv	r3, r3, r2
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	08006a34 	.word	0x08006a34
 8006384:	08006a3c 	.word	0x08006a3c

08006388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006388:	b084      	sub	sp, #16
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	f107 001c 	add.w	r0, r7, #28
 8006396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b01      	cmp	r3, #1
 800639e:	d120      	bne.n	80063e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	4b2a      	ldr	r3, [pc, #168]	; (800645c <USB_CoreInit+0xd4>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 faac 	bl	8006934 <USB_CoreReset>
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	e01a      	b.n	8006418 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 faa0 	bl	8006934 <USB_CoreReset>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
 800640a:	e005      	b.n	8006418 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	2b01      	cmp	r3, #1
 800641c:	d116      	bne.n	800644c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <USB_CoreInit+0xd8>)
 800642e:	4313      	orrs	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f043 0206 	orr.w	r2, r3, #6
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f043 0220 	orr.w	r2, r3, #32
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006458:	b004      	add	sp, #16
 800645a:	4770      	bx	lr
 800645c:	ffbdffbf 	.word	0xffbdffbf
 8006460:	03ee0000 	.word	0x03ee0000

08006464 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 0201 	bic.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d115      	bne.n	80064d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f7fa feaf 	bl	8001218 <HAL_Delay>
      ms++;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3301      	adds	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa29 	bl	8006918 <USB_GetMode>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d01e      	beq.n	800650a <USB_SetCurrentMode+0x84>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b31      	cmp	r3, #49	; 0x31
 80064d0:	d9f0      	bls.n	80064b4 <USB_SetCurrentMode+0x2e>
 80064d2:	e01a      	b.n	800650a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d115      	bne.n	8006506 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064e6:	2001      	movs	r0, #1
 80064e8:	f7fa fe96 	bl	8001218 <HAL_Delay>
      ms++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa10 	bl	8006918 <USB_GetMode>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <USB_SetCurrentMode+0x84>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b31      	cmp	r3, #49	; 0x31
 8006502:	d9f0      	bls.n	80064e6 <USB_SetCurrentMode+0x60>
 8006504:	e001      	b.n	800650a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e005      	b.n	8006516 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b32      	cmp	r3, #50	; 0x32
 800650e:	d101      	bne.n	8006514 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006520:	b084      	sub	sp, #16
 8006522:	b580      	push	{r7, lr}
 8006524:	b086      	sub	sp, #24
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800652e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800653a:	2300      	movs	r3, #0
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e009      	b.n	8006554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	3340      	adds	r3, #64	; 0x40
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	2200      	movs	r2, #0
 800654c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3301      	adds	r3, #1
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b0e      	cmp	r3, #14
 8006558:	d9f2      	bls.n	8006540 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800655a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11c      	bne.n	800659a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800656e:	f043 0302 	orr.w	r3, r3, #2
 8006572:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e005      	b.n	80065a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b8:	4619      	mov	r1, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c0:	461a      	mov	r2, r3
 80065c2:	680b      	ldr	r3, [r1, #0]
 80065c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10c      	bne.n	80065e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065d2:	2100      	movs	r1, #0
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f965 	bl	80068a4 <USB_SetDevSpeed>
 80065da:	e008      	b.n	80065ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065dc:	2101      	movs	r1, #1
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f960 	bl	80068a4 <USB_SetDevSpeed>
 80065e4:	e003      	b.n	80065ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065e6:	2103      	movs	r1, #3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f95b 	bl	80068a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ee:	2110      	movs	r1, #16
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8f3 	bl	80067dc <USB_FlushTxFifo>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f91f 	bl	8006844 <USB_FlushRxFifo>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	461a      	mov	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006622:	461a      	mov	r2, r3
 8006624:	2300      	movs	r3, #0
 8006626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662e:	461a      	mov	r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e043      	b.n	80066c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800664c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006650:	d118      	bne.n	8006684 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	e013      	b.n	8006696 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667a:	461a      	mov	r2, r3
 800667c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e008      	b.n	8006696 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	461a      	mov	r2, r3
 80066a4:	2300      	movs	r3, #0
 80066a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	461a      	mov	r2, r3
 80066b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	3301      	adds	r3, #1
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d3b7      	bcc.n	800663a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	e043      	b.n	8006758 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e6:	d118      	bne.n	800671a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	461a      	mov	r2, r3
 80066fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e013      	b.n	800672c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e008      	b.n	800672c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	461a      	mov	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	461a      	mov	r2, r3
 800673a:	2300      	movs	r3, #0
 800673c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3301      	adds	r3, #1
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d3b7      	bcc.n	80066d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800676e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f043 0210 	orr.w	r2, r3, #16
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <USB_DevInit+0x2b4>)
 800679a:	4313      	orrs	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f043 0208 	orr.w	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d105      	bne.n	80067c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <USB_DevInit+0x2b8>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d0:	b004      	add	sp, #16
 80067d2:	4770      	bx	lr
 80067d4:	803c3800 	.word	0x803c3800
 80067d8:	40000004 	.word	0x40000004

080067dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a13      	ldr	r2, [pc, #76]	; (8006840 <USB_FlushTxFifo+0x64>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e01b      	b.n	8006834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	daf2      	bge.n	80067ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	019b      	lsls	r3, r3, #6
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a08      	ldr	r2, [pc, #32]	; (8006840 <USB_FlushTxFifo+0x64>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d901      	bls.n	8006826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e006      	b.n	8006834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b20      	cmp	r3, #32
 8006830:	d0f0      	beq.n	8006814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	00030d40 	.word	0x00030d40

08006844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a11      	ldr	r2, [pc, #68]	; (80068a0 <USB_FlushRxFifo+0x5c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e018      	b.n	8006894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	daf2      	bge.n	8006850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2210      	movs	r2, #16
 8006872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <USB_FlushRxFifo+0x5c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e006      	b.n	8006894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b10      	cmp	r3, #16
 8006890:	d0f0      	beq.n	8006874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	00030d40 	.word	0x00030d40

080068a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c4:	4313      	orrs	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006904:	f043 0302 	orr.w	r3, r3, #2
 8006908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f003 0301 	and.w	r3, r3, #1
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <USB_CoreReset+0x64>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e01b      	b.n	800698a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	daf2      	bge.n	8006940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f043 0201 	orr.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a09      	ldr	r2, [pc, #36]	; (8006998 <USB_CoreReset+0x64>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e006      	b.n	800698a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d0f0      	beq.n	800696a <USB_CoreReset+0x36>

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	00030d40 	.word	0x00030d40

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 f818 	bl	80069f4 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	08006a4c 	.word	0x08006a4c
 80069e8:	08006a4c 	.word	0x08006a4c
 80069ec:	08006a4c 	.word	0x08006a4c
 80069f0:	08006a50 	.word	0x08006a50

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
